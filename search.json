[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/husker-soccer-offense-vs-defense-goals/index.html",
    "href": "posts/husker-soccer-offense-vs-defense-goals/index.html",
    "title": "The Husker women’s soccer season was capped off by an electric offense followed by a subpar defense",
    "section": "",
    "text": "Nebraska just wrapped up a fantastic season with a trip to the Elite Eight and a shared Big Ten regular-season championship. This makes it the third time the Huskers have made a quarterfinal appearance and was the first time they’ve done so since 1999. The team was spearheaded by one of the best-scoring offenses in the nation, slotting home 67 goals through 24 games. To put that into perspective, if you combine the goals scored by the Huskers in the two previous seasons, you get a total of 61 goals. Nebraska outscored their two previous seasons combined by six goals. So Nebraska had a great season, but how did they fare in their conference when it came to goals scored? How many of those goals were penalties?\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggalt)\nlibrary(ggtext)\nlibrary(patchwork)\nlibrary(ggtext)\nlibrary(ggrepel)\nlibrary(waffle)\n\ngoaldiff&lt;- read_csv(\"Goal_Differential.csv\") |&gt; select(-Rank)\n\npensscored &lt;- read_csv(\"Penalties_Scored.csv\") |&gt; select(-Rank)\n\ngoals &lt;- goaldiff |&gt;\n  inner_join(pensscored)\n\nfixedgoals &lt;- goals |&gt;\n  separate(Team, into=c(\"Team\", \"Conference\"), sep=\"\\\\(\") |&gt;\n  mutate(Conference=gsub(\")\", \"\", Conference))\n\nbiggoals &lt;- fixedgoals |&gt;\n  filter(Conference == \"Big Ten\") |&gt;\n  mutate(nonpkgoal = Goals-PS) |&gt;\n  select(Team, PS, nonpkgoal)\n\nbiggoalswide&lt;- biggoals |&gt;\n  pivot_longer(\n  cols=-Team,\n  names_to=\"Type\",\n  values_to=\"Goal\")\n\nggplot()+\n  geom_bar(data=biggoalswide, aes(x=reorder(Team, Goal), weight=Goal, fill=Type)) +\n  scale_fill_manual(values=c(\"darkgreen\",\"red\"), name=\"Goals\", labels=c(\"Non-penalty goals\",\"Penalties\")) +\n  coord_flip() +\n  labs(\n    title = \"Nebraska scored a massive amount of goals, with little help from penalties\",\n    subtitle = \"The Huskers' electric offense helped them win the Big Ten and make the elite eight\",\n    caption = \"Source = stats.ncaa.com | Henry Goodwin\",\n    x=\"\",\n    y=\"Goals\"\n  ) +\n   theme_minimal()+\n      theme(plot.title = element_text(size = 14, face = \"bold\"),\n            plot.subtitle = element_text(size = 10),\n            axis.title = element_text(size = 10),  \n            plot.title.position = \"plot\") \n\n\n\n\n\nNebraska doesn’t get many penalties, but neither does the rest of the Big Ten. Maybe players don’t go down in the box as much, or refs just don’t feel inclined to call them out. Either way, the NCAA doesn’t track stuff like that, so without going to the film room there’s no way to know. One thing you can see, however, is that Michigan State scored the most penalties in the conference, and that’s who we share our regular season title with. Breaking it down further, if you look past the team statistics, there will be reoccurring names on the stat sheet for Nebraska. Eleanor Dale, Florence Belzile, and Sarah Weber were all nightmares for defenders and goalkeepers this season. Eleanor Dale had a phenomenal year, leading the nation in goals scored and breaking the school record for goals scored in a season. If there was a Golden Boot awarded in collegiate women’s soccer, Eleanor Dale would have it on lock this season.\n\n\nCode\ngoalastleaders &lt;- read_csv(\"Point_Leaders.csv\")\n\nfixedleaders &lt;- goalastleaders |&gt;\n  separate(Player, into=c(\"Player\", \"Team\"), sep=\",\") |&gt;\n  separate(Team, into=c(\"Team\", \"Conference\"), sep=\"\\\\(\") |&gt;\n  mutate(Conference=gsub(\")\", \"\", Conference))\n\nnu &lt;- fixedleaders |&gt; filter(str_trim(Team) == \"Nebraska\")\n\nggplot() +\n  geom_point(data=fixedleaders, aes(x=Goals, y=Assists)) +\n  geom_point(data=nu, aes(x=Goals, y=Assists),color=\"#E41C38\") +\n  geom_text_repel(data=nu, aes(x=Goals, y=Assists, label=Player)) +\n  \n  labs(\n    title = \"Nebraska's players dominated the rankings in goals and assists.\",\n    subtitle = \"The dynamic duo of Eleanor Dale and Florence Belzile allowed the Huskers to average nearly three goals a game.\",\n    caption = \"Source = stats.ncaa.com | Henry Goodwin\",\n    x=\"Goals\",\n    y=\"Assists\"\n  ) +\n   theme_minimal()+\n      theme(plot.title = element_text(size = 14, face = \"bold\"),\n            plot.subtitle = element_text(size = 10),\n            axis.title = element_text(size = 10),  \n            plot.title.position = \"plot\") \n\n\n\n\n\nNebraska’s top players are mostly outliers on a list of great players. To be on the list, players had to average at least one point a game. Points are decided by the number of goals and assists a player has. One goal = 2 points, one assist = 1 point. So, if Nebraska’s offense was so good, why didn’t they make it to the college cup? Well, even if a team looks solid, upsets happen right? Well, not in Nebraska’s case. Nebraska had one weak spot, and it was their defense. Nebraska was ranked 151st when it came to average goals allowed. Unfortunately, the NCAA doesn’t keep defensive actions as statistics so clean sheets are about the only measurement of a team’s defensive performance one can get. Nebraska was one win short of making the college cup, and if they want to be a team that can contend for championships, not allowing goals needs to be a priority.\n\n\nCode\nshutout &lt;- read_csv(\"Team_Shutout.csv\")\n\nfixedshut &lt;- shutout |&gt;\n  separate(Team, into=c(\"Team\", \"Conference\"), sep=\"\\\\(\") |&gt;\n  mutate(Conference=gsub(\")\", \"\", Conference)) |&gt;\n  mutate(nonshutouts = `Team Games`-Shutouts)\n\n\nnushut &lt;- c(\"Games without a cleansheet\"=17, \"Cleansheets\"=7,1)\nfsu &lt;- c(\"Games without a cleansheet\"=8, \"Cleansheets\"=13,4)\nbyu &lt;- c(\"Games without a cleansheet\"=16, \"Cleansheets\"=9)\nclem &lt;- c(\"Games without a cleansheet\"=11, \"Cleansheets\"=14)\nstan &lt;- c(\"Games without a cleansheet\"=10, \"Cleansheets\"=13,2)\n\niron(\n  waffle(nushut,\n         rows=2,\n         xlab=\"Nebraska's keepers | 1 square = 1 game\",\n         colors = c(\"#FDF2D9\", \"#E41C38\", \"white\")) +\n    labs(\n    title = \"The Huskers' lackluster defense kept them out of the college cup\",\n    subtitle = \"scoring a ton of goals can only get a team so far, if Nebraska wants to contend, defenders and keepers need to step up.\") +\n      theme(plot.title = element_text(size = 14, face = \"bold\"),\n            plot.subtitle = element_text(size = 10),\n            axis.title = element_text(size = 10),  \n            plot.title.position = \"plot\"),\n  waffle(fsu,\n         rows=2,\n         xlab=\"Florida State's keepers | 1 square = 1 game\",\n         colors = c(\"#782F40\", \"#CEB888\", \"white\")),\n  waffle(byu,\n         rows=2,\n         xlab=\"BYU's keepers | 1 square = 1 game\",\n         colors = c(\"#002E5D\", \"#0062B8\")),\n  waffle(clem,\n         rows=2,\n         xlab=\"Clemson's keepers | 1 square = 1 game\",\n         colors = c(\"#F56600\", \"#522D80\")),\n  waffle(stan,\n         rows=2,\n         xlab=\"Stanford's keepers | 1 square = 1 game\",\n         colors = c(\"#8C1515\", \"#4D4F53\", \"white\"))+\n    labs(\n      caption = \"Source = stats.ncaa.com | Henry Goodwin\"\n    ))\n\n\n\n\n\nNebraska had a phenomenal season led by Eleanor Dale’s record-breaking 28 goals. By all metrics, this season was a huge improvement from previous seasons and John Walker has a lot to be proud of. It’s no surprise he was named Big Ten Coach of the Year. However, if Nebraska wants any chance of being a title contender, they need to tighten up on defense."
  },
  {
    "objectID": "posts/introduction/index.html",
    "href": "posts/introduction/index.html",
    "title": "About Me!",
    "section": "",
    "text": "Hi. My name is Henry Goodwin, I am a student at the University of Nebraska Lincoln. I am double majoring in Sports Media & Communications and Broadcasting with a minor in merchandising. I am currently a junior at UNL, where this year I am interning for the Huskers Radio Network, where I assist in the production of broadcasts for six different sports (football, volleyball, men’s and women’s basketball, softball, baseball). When there isn’t a game going on that we cover, I also help produce Sports Nightly, a live two hour talk show/podcast about all things Nebraska athletics. This past summer I interned for the Lincoln Saltdogs, the local pro baseball team, where I would assist in all facets of game day operation: Promotions, ticket sales, mascot handling, national anthem, first pitch, welcome center, fun zone. On non game days we would come in for box office shifts and occasionally suit up as the mascot for a mascot appearance."
  },
  {
    "objectID": "posts/chelsea-bad-spending-habits/index.html",
    "href": "posts/chelsea-bad-spending-habits/index.html",
    "title": "Looking at Chelsea’s performance after an expensive transfer window",
    "section": "",
    "text": "It’s no surprise that Chelsea have had a few disappointing seasons in recent years, but what really went wrong from winning a Champions League title in 2021 to being middle of the table in 2023? Nearly two years after Todd Boehly (and some smaller investors) bought Chelsea for 4.25 billion euros, a lot has changed at the historic London club. Four different managers have been at the helm, and the entire roster has also virtually changed, with only three players remaining. Chelsea has definitely spent like they’re a top table team, but just how far off are their expenditure rankings from their league rankings?\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggalt)\nlibrary(ggtext)\nlibrary(patchwork)\nlibrary(ggtext)\nlibrary(ggrepel)\n\nspenders &lt;- read_csv(\"soccerspending1.csv\")\n\nfixedspenders &lt;- spenders |&gt;\n  mutate(Transfer_expenditures = gsub(\"€\", \"\", Transfer_expenditures, fixed=TRUE )) |&gt;\n  mutate(Transfer_expenditures = gsub(\"m\", \"\", Transfer_expenditures, fixed=TRUE )) |&gt; \n  mutate(Transfer_expenditures = as.numeric(Transfer_expenditures))\n\nstandings &lt;- read_csv(\"Epl_Standings1.csv\")\n\nCFC &lt;- fixedspenders |&gt; filter(club == \"Chelsea FC\")\n\nSU &lt;- fixedspenders |&gt; filter(club == \"Sheffield United\")\n\nMCI &lt;- fixedspenders |&gt; filter(club == \"Manchester City\")\n\nBHA &lt;- fixedspenders |&gt; filter(club == \"Brighton & Hove Albion\")\n\nblues &lt;- standings |&gt; filter(Squad == \"Chelsea\")\n\n ggplot() +\n  geom_dumbbell (data=spenders, aes(y=reorder(club, -Expenditure_rank), x=Expenditure_rank, xend=League_position),\nsize = 2,                 \ncolour = \"grey\",\ncolour_x = \"red\", \ncolour_xend = \"green\") +\n  geom_dumbbell (data=CFC, aes(y=reorder(club, -Expenditure_rank), x=Expenditure_rank, xend=League_position),\nsize = 2,                 \ncolour = \"#034694\",\ncolour_x = \"red\", \ncolour_xend = \"green\") +\n  labs (\n    title = \"Chelsea lead the league in spending, but fall short in wins\",\nsubtitle = \"If a team's line is on the left, they're overperforming in relation to how much they spent, and if a team's\non the right, they're underperforming. Chelsea is underperforming by a significant margin.\", \ncaption = \"Source: transfermarkt.com | Henry Goodwin\",\nx = \"&lt;span style = 'color:red;' &gt;Expenditure Rank&lt;/span&gt; vs &lt;span style = 'color:green;'&gt;League Ranking&lt;/span&gt;\",\ny=\"\"\n  ) +\n      theme_minimal()+\n      theme(plot.title = element_text(size = 16, face = \"bold\"),\n            plot.subtitle = element_text(size = 10),\n            axis.title = element_text(size = 8),  \n            plot.title.position = \"plot\",\n axis.title.x = element_textbox_simple(size = 10, halign=.5))\n\n\n\n\n\nTheir expenditure ranking is really high, but what are they spending all this money on? Looking back at the last window, they spent a total of 611 million euros, with notable signings including Enzo Fernandez for 121 million euros, Wesley Fofana for 80 million euros, and Mykhaylo Mudryk for just over 100 million euros, just to name a few. Now if you look at the most recent transfer window, Chelsea eased up on the checkbook this season, spending around 460 million euros, still leading the premier league, but a decent amount less than the previous season. Some of the notable signings from that window include Moises Caicedo for 116 million euros, Romeo Lavia for 62 million euros, and Christopher Nkunku for 60 million euros. So, with a roster worth 1 billion euros, on paper this team should be really good, right?\n\n\nCode\nggplot() + \n  geom_point(\n    data=fixedspenders, \n    aes(x=goals, y=goals_allowed, size=Transfer_expenditures) \n    ) + \n  scale_size(range = c(3,8), name=\"Euros spent in millions\") +\n  \n   geom_point(\n    data=CFC, \n    aes(x=goals, y=goals_allowed, size=Transfer_expenditures), color=\"#034694\"\n    ) + \n   geom_point(\n    data=MCI, \n    aes(x=goals, y=goals_allowed, size=Transfer_expenditures), color=\"#6CABDD\"\n    ) + \n   geom_point(\n    data=SU, \n    aes(x=goals, y=goals_allowed, size=Transfer_expenditures), color=\"#EE2737\"\n    ) + \n  geom_point(\n    data=BHA, \n    aes(x=goals, y=goals_allowed, size=Transfer_expenditures), color=\"#0057B8\"\n    ) + \n  geom_text_repel(\n    data=CFC,\n    aes(x=goals, y=goals_allowed, label=club)) +\n  geom_text_repel(\n    data=MCI,\n    aes(x=goals, y=goals_allowed, label=club)) +\n  geom_text_repel(\n    data=SU,\n    aes(x=goals, y=goals_allowed, label=club)) +\n  geom_text_repel(\n    data=BHA,\n    aes(x=goals, y=goals_allowed, label=club)) +\n geom_vline(xintercept = 16.65) +\n  geom_hline(yintercept = 16.65) +\n  geom_text(aes(x=11, y=9, label=\"Bad Scorers, Good Defenders\"),color=\"red\", size=3) +\n  geom_text(aes(x=22.5, y=25, label=\"Good Scorers, Bad Defenders\"),color=\"red\", size=3) +\n  labs(\n    title = \"Chelsea's recent scoring surge eclipses their defensive consistency\",\n    subtitle = \"The blues have up until now, scored a lackluster amount of goals, despite all their financial efforts\",\n    caption = \"Source = transfermarkt.com | Henry Goodwin\",\n    x=\"Goals Scored\",\n    y=\"Goals Allowed\"\n  ) +\n   theme_minimal()+\n      theme(plot.title = element_text(size = 14, face = \"bold\"),\n            plot.subtitle = element_text(size = 10),\n            axis.title = element_text(size = 10),  \n            plot.title.position = \"plot\")\n\n\n\n\n\nSo, they aren’t the best, but Chelsea has been showing small signs of improvement. Their recent 4-1 win against 9-man Tottenham surely helped, even if they should’ve scored more. Nicolas Jackson’s hat trick in that game also made him Chelsea’s leading scorer with 6 goals on the season, overtaking Raheem Sterling’s 4. Mudryk on the other hand has had a slow start in his time at Chelsea, not scoring at all in 15 appearances in his first season. He has been doing a bit better this season with 2 goals in 9 appearances, but still not impressive when you consider how much Chelsea paid for him. some things just take time though, maybe Chelsea is back on the path to eventually winning Champions Leagues, but they need to get better as a team first. Ultimately, a team wants to score goals to win. If you want to score goals you need to be able to pass, create shots, and be able to capitalize those shot creations with shots on target to give your team a chance to score. So how has Chelsea been this season in all those categories?\n\n\nCode\nbar1 &lt;- ggplot() +\n  geom_bar(data=standings, aes(x=reorder(Squad, `Cmp%`), weight=`Cmp%`), fill=\"lightgrey\") +\n  geom_bar(data=blues, aes(x=reorder(Squad, `Cmp%`), weight=`Cmp%`), fill=\"#034694\") +\n  coord_flip() + \n  labs(\n    x=\"\",\n    y=\"Passing Percentage\") +\n  theme_minimal()\n\nbar3 &lt;- ggplot() +\n  geom_bar(data=standings, aes(x=reorder(Squad, `SoT%`), weight=`SoT%`), fill=\"lightgrey\") +\n  geom_bar(data=blues, aes(x=reorder(Squad, `SoT%`), weight=`SoT%`), fill=\"#034694\") +\n  coord_flip() + \n  labs(\n    x=\"\",\n    y=\"Shot on Target Percentage\") + \n  theme_minimal()\n    \n bar2 &lt;-  ggplot() +\n  geom_bar(data=standings, aes(x=reorder(Squad, SCA), weight=SCA), fill=\"lightgrey\") +\n  geom_bar(data=blues, aes(x=reorder(Squad, SCA), weight=SCA), fill=\"#034694\") +\n  coord_flip() + \n  labs(\n    x=\"\",\n    y=\"Shot Creating Actions\") + \n   theme_minimal()\n  \n bar1+bar2+bar3 +\n   plot_annotation(\n     title = \"Chelsea is great at passing, ok at creating shots, but poor at shooting on target\",\n     subtitle = \"Todd Boehly has completely upended Chelsea's 2021 Champions League winning squad for 9 figure strikers who struggle to find the back of the net.\",\n     caption = \"Source: fbref.com | By Henry Goodwin\"\n   ) & theme(\n     plot.title = element_text(size = 16, face = \"bold\"),\n     plot.subtitle = element_text(size = 10),\n     axis.title = element_text(size = 8),  \n     plot.title.position = \"plot\"\n     ) \n\n\n\n\n\nWell, at least they’re good at something, passing is the first step, and again, this entire squad hasn’t had much time together. Hopefully for Todd Boehly’s sake, the team picks up their slack on creating shots, and more importantly, shooting on target. One can only imagine the depression and anguish brought on by getting so few results after spending 1 BILLION euros on players. Maybe things will get better for Chelsea, but until then, London is most definitely not blue."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Using data to predict which rookie wide receiver you should draft this fantasy season\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\nfantasy\n\n\n\n\n\n\n\n\n\n\n\nMay 9, 2024\n\n\nHenry Goodwin\n\n\n\n\n\n\n  \n\n\n\n\nHow I filled out my NCAA tournament bracket using machine learning algorithms\n\n\n\n\n\n\n\nncaa\n\n\nbasketball\n\n\nmachine learning\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2024\n\n\nHenry Goodwin\n\n\n\n\n\n\n  \n\n\n\n\nThe Husker women’s soccer season was capped off by an electric offense followed by a subpar defense\n\n\n\n\n\n\n\ncode\n\n\nsoccer\n\n\nnebraska\n\n\n\n\n\n\n\n\n\n\n\nDec 1, 2023\n\n\nHenry Goodwin\n\n\n\n\n\n\n  \n\n\n\n\nLooking at Chelsea’s performance after an expensive transfer window\n\n\n\n\n\n\n\ncode\n\n\nsoccer\n\n\nchelsea\n\n\n\n\n\n\n\n\n\n\n\nNov 10, 2023\n\n\nHenry Goodwin\n\n\n\n\n\n\n  \n\n\n\n\nAbout Me!\n\n\n\n\n\n\n\nsports\n\n\ndata\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nHenry Goodwin\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/using-machine-learning-data-to-predict-ncaa-tournament-bracket/index.html",
    "href": "posts/using-machine-learning-data-to-predict-ncaa-tournament-bracket/index.html",
    "title": "How I filled out my NCAA tournament bracket using machine learning algorithms",
    "section": "",
    "text": "Recently, in my advanced sports data analysis class, we were tasked with designing a model using a machine learning algorithm to make a bracket for the NCAA tournament. A tournament that is notoriously unpredictable.\nNow I only made two other brackets using my own judgement, and I’ll use the word judgement lightly because I had Nebraska winning it all in one of them. But the model I made using machine learning outperformed both of them.\nNot only did I have UConn winning in my bracket, but so did nearly the rest of the class and the rest of America. It didn’t give me a huge edge, but it speaks to how dominant the Huskies are.\nMy Final Four was 50% right, but my model for some reason really favored all the one seeds in the tournament, which isn’t entirely a bad thing. After all, they are one seeds for a reason.\nGoing into the tournament I was incredibly doubtful with some of the picks my model made, because who in their right mind would have Oakland beating Kentucky? Trying to predict the outcome of this tournament is incredibly difficult, but let’s see what went wrong, and what went right.\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(hoopR)\nlibrary(zoo)\nlibrary(gt)\n\n\n\nset.seed(1234)\n\ngames &lt;- load_mbb_team_box(seasons = 2015:2024) |&gt; filter(game_date &lt; as.Date(\"2024-03-18\"))\n\n\noppreb &lt;- games |&gt; select(game_id, team_id, total_rebounds) |&gt; rename(opponent_team_id = team_id, opponent_rebounds = total_rebounds)\n\ngameswithreb &lt;- games |&gt; inner_join(oppreb)\n\nnond1 &lt;- gameswithreb |&gt; \n  group_by(team_id, season) |&gt;\n  tally() |&gt; filter(n &lt; 10 & season != 2021) |&gt;\n  select(team_id)\n\nnond1 &lt;- pull(nond1)\n\ndf &lt;- gameswithreb |&gt; filter(!team_id %in% nond1 & !opponent_team_id %in% nond1)\n\nteamside &lt;- df |&gt; \n  group_by(team_id, season) |&gt; \n  arrange(game_date) |&gt; \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_offensive_efficiency = lag(cummean(team_offensive_efficiency), n=1),\n    team_season_defensive_efficiency = lag(cummean(team_defensive_efficiency), n=1),  \n    score_margin = team_score - opponent_team_score,\n    team_rolling_mean_offensive_efficiency = rollmean(lag(team_offensive_efficiency, n=1), k=5, align = \"right\", fill=NA),\n    team_rolling_mean_defensive_efficiency = rollmean(lag(team_defensive_efficiency, n=1), k=5, align = \"right\", fill=NA),\n    absolute_score_margin = abs(score_margin),\n    rebound_margin = total_rebounds - opponent_rebounds,\n    team_rolling_rebound_margin = rollmean(lag(rebound_margin, n=1), k=5, align = \"right\", fill =NA)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt;\n  ungroup()\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    team_opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    team_opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    team_rolling_mean_opponent_offensive_efficiency = team_rolling_mean_offensive_efficiency,\n    team_rolling_mean_opponent_defensive_efficiency = team_rolling_mean_defensive_efficiency,\n    team_opponent_rolling_rebound_margin = team_rolling_rebound_margin\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    team_opponent_season_offensive_efficiency,\n    team_opponent_season_defensive_efficiency, \n    team_rolling_mean_opponent_offensive_efficiency,\n    team_rolling_mean_opponent_defensive_efficiency,\n    team_opponent_rolling_rebound_margin\n  )\n  \n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\nbothsides &lt;- bothsides |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\"\n)))\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season, \n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    team_opponent_season_offensive_efficiency,\n    team_opponent_season_defensive_efficiency, \n    team_rolling_mean_opponent_offensive_efficiency,\n    team_rolling_mean_offensive_efficiency,\n    team_rolling_mean_opponent_defensive_efficiency,\n    team_rolling_mean_defensive_efficiency,\n    team_result, \n    team_rolling_rebound_margin\n    ) |&gt; na.omit()\n\ngame_split &lt;- initial_split(modelgames, prop = .8)\ngame_train &lt;- training(game_split)\ngame_test &lt;- testing(game_split)\n\ngame_recipe &lt;- \n  recipe(team_result ~ ., data = game_split) |&gt; \n  update_role(game_id, game_date, team_short_display_name, opponent_team_short_display_name, season, new_role = \"ID\") |&gt;\n  step_normalize(all_predictors())\n\n\nlog_mod &lt;- \n  logistic_reg() |&gt; \n  set_engine(\"glm\") |&gt;\n  set_mode(\"classification\")\n\nrf_mod &lt;- \n  rand_forest() |&gt; \n  set_engine(\"ranger\") |&gt;\n  set_mode(\"classification\")\n\nlog_workflow &lt;- \n  workflow() |&gt; \n  add_model(log_mod) |&gt; \n  add_recipe(game_recipe)\n\nrf_workflow &lt;- \n  workflow() |&gt; \n  add_model(rf_mod) |&gt; \n  add_recipe(game_recipe)\n\nlog_fit &lt;- \n  log_workflow |&gt; \n  fit(data = game_train)\n\nrf_fit &lt;- \n  rf_workflow |&gt; \n  fit(data = game_train)\n\nlogpredict &lt;- log_fit |&gt; predict(new_data = game_train) |&gt;\n  bind_cols(game_train) \n\nlogpredict &lt;- log_fit |&gt; predict(new_data = game_train, type=\"prob\") |&gt;\n  bind_cols(logpredict)\n\nrfpredict &lt;- rf_fit |&gt; predict(new_data = game_train) |&gt;\n  bind_cols(game_train) \n\nrfpredict &lt;- rf_fit |&gt; predict(new_data = game_train, type=\"prob\") |&gt;\n  bind_cols(rfpredict)\n\n\nlogtestpredict &lt;- log_fit |&gt; predict(new_data = game_test) |&gt;\n  bind_cols(game_test)\n\nlogtestpredict &lt;- log_fit |&gt; predict(new_data = game_test, type=\"prob\") |&gt;\n  bind_cols(logtestpredict)\n\nrftestpredict &lt;- rf_fit |&gt; predict(new_data = game_test) |&gt;\n  bind_cols(game_test)\n\nrftestpredict &lt;- rf_fit |&gt; predict(new_data = game_test, type=\"prob\") |&gt;\n  bind_cols(rftestpredict)\n\nteamside &lt;- df |&gt; \n  group_by(team_id, season) |&gt; \n  arrange(game_date) |&gt; \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_offensive_efficiency = cummean(team_offensive_efficiency),\n    team_season_defensive_efficiency = cummean(team_defensive_efficiency),  \n    score_margin = team_score - opponent_team_score,\n    team_rolling_mean_offensive_efficiency = rollmean(team_offensive_efficiency, k=5, align = \"right\", fill=NA),\n    team_rolling_mean_defensive_efficiency = rollmean(team_defensive_efficiency, k=5, align = \"right\", fill=NA),\n    absolute_score_margin = abs(score_margin),\n    rebound_margin = total_rebounds - opponent_rebounds, \n    team_rolling_rebound_margin = rollmean(rebound_margin, k=5, align = \"right\", fill =NA)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt;\n  ungroup()\n\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    team_opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    team_opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    team_rolling_mean_opponent_offensive_efficiency = team_rolling_mean_offensive_efficiency,\n    team_rolling_mean_opponent_defensive_efficiency = team_rolling_mean_defensive_efficiency,\n    team_opponent_rolling_rebound_margin = team_rolling_rebound_margin,\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    team_opponent_season_offensive_efficiency,\n    team_opponent_season_defensive_efficiency, \n    team_rolling_mean_opponent_offensive_efficiency,\n    team_rolling_mean_opponent_defensive_efficiency,\n    team_opponent_rolling_rebound_margin\n  )\n  \n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\nbothsides &lt;- bothsides |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\"\n)))\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season, \n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    team_opponent_season_offensive_efficiency,\n    team_opponent_season_defensive_efficiency, \n    team_rolling_mean_opponent_offensive_efficiency,\n    team_rolling_mean_offensive_efficiency,\n    team_rolling_mean_opponent_defensive_efficiency,\n    team_rolling_mean_defensive_efficiency,\n    team_result, \n    team_rolling_rebound_margin\n    ) |&gt; na.omit()\n\nplayingames &lt;- tibble(\n  team_short_display_name =\"Howard\",\n  opponent_team_short_display_name = \"Wagner\"\n) |&gt; add_row(\n  team_short_display_name = \"Boise St\",\n  opponent_team_short_display_name = \"Colorado\"\n) |&gt; add_row(\n  team_short_display_name = \"Montana St\",\n  opponent_team_short_display_name = \"Grambling\"\n) |&gt; add_row(\n  team_short_display_name = \"Colorado St\",\n  opponent_team_short_display_name = \"Virginia\"\n)\n\nplayingames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(playingames)\n\nplayingames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(playingames) \n\nplayin &lt;- rf_fit |&gt; predict(new_data = playingames) |&gt;\n  bind_cols(playingames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nplayin &lt;- rf_fit |&gt; predict(new_data = playingames, type=\"prob\") |&gt;\n  bind_cols(playin) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\neastround1games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Stetson\"\n) |&gt; add_row(\n  team_short_display_name=\"FAU\",\n  opponent_team_short_display_name=\"Northwestern\"\n) |&gt; add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"UAB\"\n) |&gt; add_row(\n  team_short_display_name=\"Auburn\",\n  opponent_team_short_display_name=\"Yale\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Duquesne\"\n) |&gt; add_row(\n  team_short_display_name=\"Illinois\",\n  opponent_team_short_display_name=\"Morehead St\"\n) |&gt; add_row(\n  team_short_display_name=\"Washington St\",\n  opponent_team_short_display_name=\"Drake\"\n) |&gt; add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_team_short_display_name=\"S Dakota St\"\n)\n\neastround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround1games)\n\neastround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround1games) \n\neastround1 &lt;- rf_fit |&gt; predict(new_data = eastround1games) |&gt;\n  bind_cols(eastround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround1 &lt;- rf_fit |&gt; predict(new_data = eastround1games, type=\"prob\") |&gt;\n  bind_cols(eastround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\neastround2games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"FAU\"\n) |&gt; add_row(\n  team_short_display_name=\"UAB\",\n  opponent_team_short_display_name=\"Auburn\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Illinois\"\n) |&gt; add_row(\n  team_short_display_name=\"Drake\",\n  opponent_team_short_display_name=\"S Dakota St\"\n)\n\neastround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround2games)\n\neastround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround2games) \n\neastround2 &lt;- rf_fit |&gt; predict(new_data = eastround2games) |&gt;\n  bind_cols(eastround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround2 &lt;- rf_fit |&gt; predict(new_data = eastround2games, type=\"prob\") |&gt;\n  bind_cols(eastround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\neastround3games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"UAB\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Drake\"\n) \n\neastround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround3games)\n\neastround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround3games) \n\neastround3 &lt;- rf_fit |&gt; predict(new_data = eastround3games) |&gt;\n  bind_cols(eastround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround3 &lt;- rf_fit |&gt; predict(new_data = eastround3games, type=\"prob\") |&gt;\n  bind_cols(eastround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\neastround4games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"BYU\"\n) \n\neastround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround4games)\n\neastround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround4games) \n\neastround4 &lt;- rf_fit |&gt; predict(new_data = eastround4games) |&gt;\n  bind_cols(eastround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround4 &lt;- rf_fit |&gt; predict(new_data = eastround4games, type=\"prob\") |&gt;\n  bind_cols(eastround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nwestround1games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Wagner\"\n) |&gt; add_row(\n  team_short_display_name=\"Mississippi St\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Grand Canyon\"\n) |&gt; add_row(\n  team_short_display_name=\"Alabama\",\n  opponent_team_short_display_name=\"Charleston\"\n) |&gt; add_row(\n  team_short_display_name=\"Clemson\",\n  opponent_team_short_display_name=\"New Mexico\"\n) |&gt; add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_team_short_display_name=\"Colgate\"\n) |&gt; add_row(\n  team_short_display_name=\"Dayton\",\n  opponent_team_short_display_name=\"Nevada\"\n) |&gt; add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_team_short_display_name=\"Long Beach St\"\n)\n\nwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround1games)\n\nwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround1games) \n\nwestround1 &lt;- rf_fit |&gt; predict(new_data = westround1games) |&gt;\n  bind_cols(westround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround1 &lt;- rf_fit |&gt; predict(new_data = westround1games, type=\"prob\") |&gt;\n  bind_cols(westround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Charlston\"\n) |&gt; add_row(\n  team_short_display_name=\"New Mexico\",\n  opponent_team_short_display_name=\"Colgate\"\n) |&gt; add_row(\n  team_short_display_name=\"Dayton\",\n  opponent_team_short_display_name=\"Arizona\"\n) \n\nwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround2games)\n\nwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround2games) \n\nwestround2 &lt;- rf_fit |&gt; predict(new_data = westround2games) |&gt;\n  bind_cols(westround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2 &lt;- rf_fit |&gt; predict(new_data = westround2games, type=\"prob\") |&gt;\n  bind_cols(westround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround3games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Saint Mary's\"\n) |&gt; add_row(\n  team_short_display_name=\"New Mexico\",\n  opponent_team_short_display_name=\"Dayton\"\n) \n\nwestround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround3games)\n\nwestround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround3games) \n\nwestround3 &lt;- rf_fit |&gt; predict(new_data = westround3games) |&gt;\n  bind_cols(westround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround3 &lt;- rf_fit |&gt; predict(new_data = westround3games, type=\"prob\") |&gt;\n  bind_cols(westround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nwestround4games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"New Mexico\"\n) \n\nwestround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround4games)\n\nwestround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround4games) \n\nwestround4 &lt;- rf_fit |&gt; predict(new_data = westround4games) |&gt;\n  bind_cols(westround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround4 &lt;- rf_fit |&gt; predict(new_data = westround4games, type=\"prob\") |&gt;\n  bind_cols(westround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Longwood\"\n) |&gt; add_row(\n  team_short_display_name=\"Nebraska\",\n  opponent_team_short_display_name=\"Texas A&M\"\n) |&gt; add_row(\n  team_short_display_name=\"Wisconsin\",\n  opponent_team_short_display_name=\"James Madison\"\n) |&gt; add_row(\n  team_short_display_name=\"Duke\",\n  opponent_team_short_display_name=\"Vermont\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas Tech\",\n  opponent_team_short_display_name=\"NC State\"\n) |&gt; add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_team_short_display_name=\"Oakland\"\n) |&gt; add_row(\n  team_short_display_name=\"Florida\",\n  opponent_team_short_display_name=\"Colorado\"\n) |&gt; add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_team_short_display_name=\"Western KY\"\n)\n\nsouthround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround1games)\n\nsouthround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround1games) \n\nsouthround1 &lt;- rf_fit |&gt; predict(new_data = southround1games) |&gt;\n  bind_cols(southround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1 &lt;- rf_fit |&gt; predict(new_data = southround1games, type=\"prob\") |&gt;\n  bind_cols(southround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Texas A&M\"\n) |&gt; add_row(\n  team_short_display_name=\"James Madison\",\n  opponent_team_short_display_name=\"Duke\"\n) |&gt; add_row(\n  team_short_display_name=\"NC State\",\n  opponent_team_short_display_name=\"Oakland\"\n) |&gt; add_row(\n  team_short_display_name=\"Colorado\",\n  opponent_team_short_display_name=\"Western KY\"\n) \n\nsouthround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround2games)\n\nsouthround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround2games) \n\nsouthround2 &lt;- rf_fit |&gt; predict(new_data = southround2games) |&gt;\n  bind_cols(southround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2 &lt;- rf_fit |&gt; predict(new_data = southround2games, type=\"prob\") |&gt;\n  bind_cols(southround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround3games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"James Madison\"\n) |&gt; add_row(\n  team_short_display_name=\"Oakland\",\n  opponent_team_short_display_name=\"Colorado\"\n)\n\nsouthround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround3games)\n\nsouthround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround3games) \n\nsouthround3 &lt;- rf_fit |&gt; predict(new_data = southround3games) |&gt;\n  bind_cols(southround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround3 &lt;- rf_fit |&gt; predict(new_data = southround3games, type=\"prob\") |&gt;\n  bind_cols(southround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround4games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Colorado\"\n) \n\nsouthround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround4games)\n\nsouthround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround4games) \n\nsouthround4 &lt;- rf_fit |&gt; predict(new_data = southround4games) |&gt;\n  bind_cols(southround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround4 &lt;- rf_fit |&gt; predict(new_data = southround4games, type=\"prob\") |&gt;\n  bind_cols(southround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Grambling\"\n) |&gt; add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_team_short_display_name=\"TCU\"\n) |&gt; add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"Kansas\",\n  opponent_team_short_display_name=\"Samford\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Oregon\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Akron\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas\",\n  opponent_team_short_display_name=\"Colorado St\"\n) |&gt; add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_team_short_display_name=\"Saint Peter's\"\n)\n\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround1games)\n\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround1games) \n\nmidwestround1 &lt;- rf_fit |&gt; predict(new_data = midwestround1games) |&gt;\n  bind_cols(midwestround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1 &lt;- rf_fit |&gt; predict(new_data = midwestround1games, type=\"prob\") |&gt;\n  bind_cols(midwestround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nmidwestround2games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Utah State\"\n) |&gt; add_row(\n  team_short_display_name=\"McNeese\",\n  opponent_team_short_display_name=\"Samford\"\n) |&gt; add_row(\n  team_short_display_name=\"Oregon\",\n  opponent_team_short_display_name=\"Creighton\"\n) |&gt; add_row(\n  team_short_display_name=\"Colorado St\",\n  opponent_team_short_display_name=\"Tennessee\"\n) \n\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround2games)\n\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround2games) \n\nmidwestround2 &lt;- rf_fit |&gt; predict(new_data = midwestround2games) |&gt;\n  bind_cols(midwestround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround2 &lt;- rf_fit |&gt; predict(new_data = midwestround2games, type=\"prob\") |&gt;\n  bind_cols(midwestround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nmidwestround3games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Tennessee\"\n)\n\nmidwestround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround3games)\n\nmidwestround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround3games) \n\nmidwestround3 &lt;- rf_fit |&gt; predict(new_data = midwestround3games) |&gt;\n  bind_cols(midwestround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround3 &lt;- rf_fit |&gt; predict(new_data = midwestround3games, type=\"prob\") |&gt;\n  bind_cols(midwestround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nmidwestround4games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Creighton\"\n) \n\nmidwestround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround4games)\n\nmidwestround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround4games) \n\nmidwestround4 &lt;- rf_fit |&gt; predict(new_data = midwestround4games) |&gt;\n  bind_cols(midwestround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround4 &lt;- rf_fit |&gt; predict(new_data = midwestround4games, type=\"prob\") |&gt;\n  bind_cols(midwestround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nfinal4games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"North Carolina\"\n) |&gt; add_row(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Purdue\"\n)\n\nfinal4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(final4games)\n\nfinal4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(final4games) \n\nfinal4 &lt;- rf_fit |&gt; predict(new_data = final4games) |&gt;\n  bind_cols(final4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nfinal4 &lt;- rf_fit |&gt; predict(new_data = final4games, type=\"prob\") |&gt;\n  bind_cols(final4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nnattygames &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Houston\"\n)\n\nnattygames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(nattygames)\n\nnattygames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(nattygames) \n\nnatty &lt;- rf_fit |&gt; predict(new_data = nattygames) |&gt;\n  bind_cols(nattygames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nnatty &lt;- rf_fit |&gt; predict(new_data = nattygames, type=\"prob\") |&gt;\n  bind_cols(natty) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nTo make my predictions, I primarily used a rolling mean value of a team’s offensive and defensive efficiency. That value was determined using a formula to find points per possession and then multiplying that value by 100. Another factor which I thought would heavily impact the outcome of a game would be a team’s rebound margin. I feel like whenever I’m watching a close game, i’ve often seen one team run away with it because they can get an offensive rebound giving their team another chance at a shot. This did come back to bite me, however because some teams are great at rebounding, but aren’t as good at the rest of basketball.\n\n\nCode\nsummary(game_recipe) |&gt;\n  select(variable, role) |&gt; \n  filter(role != \"ID\") |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"The predictors\",\n    subtitle = \"A mix of efficiencies, ratings and recency bias.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Henry Goodwin\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      The predictors\n    \n    \n      A mix of efficiencies, ratings and recency bias.\n    \n    \n      variable\n      role\n    \n  \n  \n    team_season_offensive_efficiency\npredictor\n    team_season_defensive_efficiency\npredictor\n    team_opponent_season_offensive_efficiency\npredictor\n    team_opponent_season_defensive_efficiency\npredictor\n    team_rolling_mean_opponent_offensive_efficiency\npredictor\n    team_rolling_mean_offensive_efficiency\npredictor\n    team_rolling_mean_opponent_defensive_efficiency\npredictor\n    team_rolling_mean_defensive_efficiency\npredictor\n    team_rolling_rebound_margin\npredictor\n    team_result\noutcome\n  \n  \n    \n      By: Henry Goodwin\n    \n  \n  \n\n\n\n\nOriginally I was trying out logistic regression and random forests, and was getting similar numbers, so I just decided to go with random forests, since the idea of decision trees branching out into different choices reminds me of a bracket.\nWhen I was making my bracket, I was not confident in about half of the picks my model was making, and would wince a little bit for every time my model had McNeese winning a game.\nUltimately in the first round my model performed the best in the South, where it got 7/8 games correct, and of course the one game it missed was due to 2 seed Marquette destroying 15 seed Western Kentucky 87-69. Who could’ve guessed? Not my model apparently.\nHere’s what my model predicted:\n\n\nCode\nsouthround1 |&gt; \n  select(team_short_display_name, .pred_class, .pred_W, opponent_team_short_display_name) |&gt;\n  gt() |&gt; \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) |&gt;\n  tab_header(\n    title = \"South Regional: Round 1\",\n    subtitle = \"Picking Texas A&M was hard, but points are points.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Henry Goodwin\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(.pred_W),\n    decimals = 1\n  )\n\n\n\n\n\n\n  \n    \n      South Regional: Round 1\n    \n    \n      Picking Texas A&M was hard, but points are points.\n    \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    Houston\nW\n52.1%\nLongwood\n    Wisconsin\nL\n37.4%\nJames Madison\n    Kentucky\nL\n46.3%\nOakland\n    Florida\nL\n12.9%\nColorado\n    Texas Tech\nL\n19.1%\nNC State\n    Marquette\nL\n22.8%\nWestern KY\n    Nebraska\nL\n29.8%\nTexas A&M\n    Duke\nW\n70.8%\nVermont\n  \n  \n    \n      By: Henry Goodwin\n    \n  \n  \n\n\n\n\nWhile one region was kind to my model, one was very rude to my model, and was almost the complete opposite of the south. In the East region, my model only got two of the games correct in the first round. Funny enough, however, both the East and South were 1/4 in the second round.\nHonestly, the absurdity of the picks didn’t change all too much between the South and the East, I honestly think I just got unlucky. All my predicted upsets didn’t happen, which is normal, it’d be an upset for a reason, but most of the games where I picked the team that should’ve probably won, they got upset.\n\n\nCode\neastround1 |&gt; \n  select(team_short_display_name, .pred_class, .pred_W, opponent_team_short_display_name) |&gt;\n  gt() |&gt; \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) |&gt;\n  tab_header(\n    title = \"East Regional: Round 1\",\n    subtitle = \"Once Duquesne beat BYU, I knew it was the beginning of the end for my bracket.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Henry Goodwin\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(.pred_W),\n    decimals = 1\n  )\n\n\n\n\n\n\n  \n    \n      East Regional: Round 1\n    \n    \n      Once Duquesne beat BYU, I knew it was the beginning of the end for my bracket.\n    \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    Illinois\nW\n54.0%\nMorehead St\n    Washington St\nL\n43.9%\nDrake\n    UConn\nW\n75.1%\nStetson\n    Iowa State\nL\n40.2%\nS Dakota St\n    FAU\nW\n65.8%\nNorthwestern\n    San Diego St\nL\n34.5%\nUAB\n    BYU\nW\n58.7%\nDuquesne\n    Auburn\nW\n85.4%\nYale\n  \n  \n    \n      By: Henry Goodwin\n    \n  \n  \n\n\n\n\n2/4 in the final 4 while correctly guessing UConn to win isn’t too shabby, but all 1 seeds in the final 4 isn’t exactly a bold take. I also think part of the reason why all the 1 seeds made it for me was because my model had so many upsets that it left a decently easy road for all of them.\nWhether I should’ve included more predictors or not, I was in the 76th percentile of bracket makers, leaving 6.2 million brackets better than mine. In our class group I was tied for fifth. Guessing the champion didn’t earn me many points in the competition, since all but two had UConn winning it all. I guess that just speaks to how dominant that team is. Nine different models using different predictors all came to the conclusion that another UConn championship was inevitable.\nIf I were to make my model again, I would definitely want to include some sort of Elo system to make some conferences better than others. That way I wouldn’t have so many predicted upsets, like McNeese winning a couple of games because they dogwalked the Montana School for the Visually Impaired. Even some sort of system that gave teams with a higher seed more of a leg up would be helpful. I think I would also choose to include more than just rebound margin and offensive and defensive efficiency.\nThe code I used to make my model was greatly helped by hoopR and Tidymodels."
  },
  {
    "objectID": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html",
    "href": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html",
    "title": "Using data to predict which rookie wide receiver you should draft this fantasy season",
    "section": "",
    "text": "Predicting which receivers will shine in their rookie season is difficult, and almost impossible to get 100% right. Take Puka Nacua for example, he was on no one’s radar before the season and he ended up being a Pro Bowler with Second Team All-Pro honors. The factors I considered to determine my list were pre-draft grade, where in the draft they were selected, some college production stats, and completion percentage of the team they got drafted to. Ultimately the guy throwing the passes to the receiver is a massive concern that could make the difference between doing the last place punishment or laughing at your buddy while they do the punishment.\nSo who are the top 10?\nCode\nlibrary(tidyverse)\nlibrary(cfbfastR)\nlibrary(tidymodels)\nlibrary(zoo)\nlibrary(bonsai)\nlibrary(gt)\n\nset.seed(1234)\n\nwrpicks &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/wrpicks1423.csv\") |&gt; \n  mutate(college_year = year - 1)\n\nwrstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/receiving1323.csv\")\nwrusage &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/usage1323.csv\")\nwrfantasy &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/fantasystats1423.csv\") |&gt; \n  mutate(nfl_team = case_when(\n    tm == \"ARI\" ~ \"Arizona Cardinals\",\n    tm == \"ATL\" ~ \"Atlanta Falcons\",\n    tm == \"BAL\" ~ \"Baltimore Ravens\",\n    tm == \"BUF\" ~ \"Buffalo Bills\",\n    tm == \"CAR\" ~ \"Carolina Panthers\",\n    tm == \"CHI\" ~ \"Chicago Bears\",\n    tm == \"CIN\" ~ \"Cincinnati Bengals\",\n    tm == \"CLE\" ~ \"Cleveland Browns\",\n    tm == \"DAL\" ~ \"Dallas Cowboys\",\n    tm == \"DEN\" ~ \"Denver Broncos\",\n    tm == \"DET\" ~ \"Detroit Lions\",\n    tm == \"GNB\" ~ \"Green Bay Packers\",\n    tm == \"HOU\" ~ \"Houston Texans\",\n    tm == \"IND\" ~ \"Indianapolis Colts\",\n    tm == \"JAX\" ~ \"Jacksonville Jaguars\",\n    tm == \"KAN\" ~ \"Kansas City Chiefs\",\n    tm == \"LAC\" ~ \"Los Angeles Chargers\", \n    tm == \"LAR\" ~ \"Los Angeles Rams\", \n    tm == \"LVR\" ~ \"Las Vegas Raiders\",\n    tm == \"MIA\" ~ \"Miami Dolphins\",  \n    tm == \"MIN\" ~ \"Minnesota Vikings\",\n    tm == \"NOR\" ~ \"New Orleans Saints\",\n    tm == \"NWE\" ~ \"New England Patriots\",\n    tm == \"NYG\" ~ \"New York Giants\",\n    tm == \"NYJ\" ~ \"New York Jets\",\n    tm == \"OAK\" ~ \"Las Vegas Raiders\",\n    tm == \"PHI\" ~ \"Philadelphia Eagles\",\n    tm == \"PIT\" ~ \"Pittsburgh Steelers\",\n    tm == \"SDG\" ~ \"Los Angeles Chargers\",\n    tm == \"SEA\" ~ \"Seattle Seahawks\",\n    tm == \"SFO\" ~ \"San Francisco 49ers\",\n    tm == \"STL\" ~ \"Los Angeles Rams\",\n    tm == \"TAM\" ~ \"Tampa Bay Buccaneers\",\n    tm == \"TEN\" ~ \"Tennessee Titans\",\n    tm == \"WAS\" ~ \"Washington Commanders\",\n  ))\n\nnflstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/nfl_passing_offense0023.csv\") |&gt; filter(season &gt;= 2009) |&gt; \n  mutate(\n    nfl_team = case_when(\n      tm == \"Oakland Raiders\" ~ \"Las Vegas Raiders\",\n      tm == \"San Diego Chargers\" ~ \"Los Angeles Chargers\",\n      tm == \"St. Louis Rams\" ~ \"Los Angeles Rams\",\n      tm == \"Washington Football Team\" ~ \"Washington Commanders\",\n      tm == \"Washington Redskins\" ~ \"Washington Commanders\",\n      TRUE ~ tm\n      ))\n\nwrpicksselected &lt;- wrpicks |&gt; \n  select(\n    college_athlete_id,\n    nfl_athlete_id,\n    college_id,\n    name,\n    college_team, \n    college_conference,\n    nfl_team, \n    year,\n    college_year,\n    overall,\n    pre_draft_grade\n  )\n\nwrstatsselected &lt;- wrstats |&gt; \n  select(\n    athlete_id,\n    season,\n    receiving_yds,\n    receiving_ypr\n  )\n\nwrfantasyselected &lt;- wrfantasy |&gt; \n  filter(fant_pos == \"WR\") |&gt; \n  select(\n    season,\n    player, \n    nfl_team,\n    fant_pos,\n    fant_pt\n  )\n\nnflpassingselected &lt;- nflstats |&gt; \n  mutate(\n    rolling_mean_passing_yards = rollmean(yds, k=3, align = \"right\", fill=NA),\n    rolling_mean_passing_tds = rollmean(td, k=3, align = \"right\", fill=NA),\n  ) |&gt; \n  filter(season &gt;= 2014) |&gt; \n  select(\n    season,\n    nfl_team,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    cmp_percent\n    \n  )\n  \nwrpicksstats &lt;- wrpicksselected |&gt; \n  inner_join(wrstatsselected, by=c(\"college_athlete_id\"=\"athlete_id\", \"college_year\" = \"season\"))\n\nwrpicksandfantasy &lt;- wrfantasyselected |&gt; \n  inner_join(wrpicksstats, by=c(\"player\" = \"name\", \"season\"=\"year\")) \n\nwrmodeling &lt;- wrpicksandfantasy |&gt;\n  left_join(nflpassingselected, by=c(\"season\"=\"season\", \"nfl_team.x\"=\"nfl_team\")) |&gt; \n  select(-nfl_team.y)\n\nwrmodelingselected &lt;- wrmodeling |&gt; \n  select(\n    season,\n    player,\n    nfl_team.x,\n    overall,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    fant_pt,\n    cmp_percent,\n    receiving_ypr\n  ) |&gt; \n  rename(\n    nfl_team = nfl_team.x\n  )\n\nplayer_split &lt;- initial_split(wrmodelingselected, prop = .8)\n\nplayer_train &lt;- training(player_split)\nplayer_test &lt;- testing(player_split)\n\nplayer_recipe &lt;- \n  recipe(fant_pt ~ ., data = player_train) |&gt; \n  update_role(player, season, nfl_team, new_role = \"ID\")\n\nlinear_mod &lt;- \n  linear_reg() |&gt; \n  set_engine(\"lm\") |&gt;\n  set_mode(\"regression\")\n\nlinear_workflow &lt;- \n  workflow() %&gt;% \n  add_model(linear_mod) %&gt;% \n  add_recipe(player_recipe)\n\nlinear_fit &lt;- \n  linear_workflow %&gt;% \n  fit(data = player_train)\n\n\nwrpicks &lt;- cfbd_draft_picks(year = 2024) |&gt; \n  filter(position == \"Wide Receiver\") |&gt; \n  mutate(college_year = year - 1) |&gt; \n  mutate(college_athlete_id = as.character(college_athlete_id)) |&gt; \n  mutate(nfl_team = case_when(\n    nfl_team == \"Arizona\" ~ \"Arizona Cardinals\",\n    nfl_team == \"Atlanta\" ~ \"Atlanta Falcons\",\n    nfl_team == \"Baltimore\" ~ \"Baltimore Ravens\",\n    nfl_team == \"Buffalo\" ~ \"Buffalo Bills\",\n    nfl_team == \"Carolina\" ~ \"Carolina Panthers\",\n    nfl_team == \"Chicago\" ~ \"Chicago Bears\",\n    nfl_team == \"Cincinnati\" ~ \"Cincinnati Bengals\",\n    nfl_team == \"Cleveland\" ~ \"Cleveland Browns\",\n    nfl_team == \"Dallas\" ~ \"Dallas Cowboys\",\n    nfl_team == \"Denver\" ~ \"Denver Broncos\",\n    nfl_team == \"Detroit\" ~ \"Detroit Lions\",\n    nfl_team == \"Green Bay\" ~ \"Green Bay Packers\",\n    nfl_team == \"Houston\" ~ \"Houston Texans\",\n    nfl_team == \"Indianapolis\" ~ \"Indianapolis Colts\",\n    nfl_team == \"Jacksonville\" ~ \"Jacksonville Jaguars\",\n    nfl_team == \"Kansas City\" ~ \"Kansas City Chiefs\",\n    name == \"Ladd McConkey\" ~ \"Los Angeles Chargers\", \n    name == \"Brenden Rice\" ~ \"Los Angeles Chargers\", \n    name == \"Cornelius Johnson\" ~ \"Los Angeles Chargers\",\n    name == \"Jordan Whittington\" ~ \"Los Angeles Rams\", \n    nfl_team == \"Las Vegas\" ~ \"Las Vegas Raiders\",\n    nfl_team == \"Miami\" ~ \"Miami Dolphins\",  \n    nfl_team == \"Minnesota\" ~ \"Minnesota Vikings\",\n    nfl_team == \"New Orleans\" ~ \"New Orleans Saints\",\n    nfl_team == \"New England\" ~ \"New England Patriots\",\n    name == \"Malik Nabers\" ~ \"New York Giants\",\n    nfl_team == \"New York\" ~ \"New York Jets\",\n    nfl_team == \"Philadelphia\" ~ \"Philadelphia Eagles\",\n    nfl_team == \"Pittsburgh\" ~ \"Pittsburgh Steelers\",\n    nfl_team == \"Seattle\" ~ \"Seattle Seahawks\",\n    nfl_team == \"San Francisco\" ~ \"San Francisco 49ers\",\n    nfl_team == \"St Louis\" ~ \"Los Angeles Rams\",\n    nfl_team == \"Tampa Bay\" ~ \"Tampa Bay Buccaneers\",\n    nfl_team == \"Tennessee\" ~ \"Tennessee Titans\",\n    nfl_team == \"Washington\" ~ \"Washington Commanders\",\n  ))\n\nwrstats &lt;- cfbd_stats_season_player(2023, category = \"receiving\") |&gt; \n  mutate(season = 2023)\n\nwrpicksselected &lt;- wrpicks |&gt; \n  select(\n    college_athlete_id,\n    nfl_athlete_id,\n    college_id,\n    name,\n    college_team, \n    college_conference,\n    nfl_team, \n    year,\n    college_year,\n    overall,\n    pre_draft_grade\n  )\n\nwrstatsselected &lt;- wrstats |&gt; \n  select(\n    athlete_id,\n    season,\n    receiving_yds,\n    receiving_ypr\n  )\n\nwrpicksstats &lt;- wrpicksselected |&gt; \n  inner_join(wrstatsselected, by=c(\"college_athlete_id\"=\"athlete_id\", \"college_year\" = \"season\"))\n\nwrmodeling &lt;- wrpicksstats |&gt;\n  left_join(nflpassingselected, by=c(\"college_year\"=\"season\", \"nfl_team\"=\"nfl_team\")) |&gt;\n  select(\n    year,\n    name,\n    nfl_team,\n    overall,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    cmp_percent,\n    receiving_ypr\n  ) |&gt; \n  rename(\n    player = name,\n    season = year\n  )\n\nlinearpredict &lt;- \n  linear_fit %&gt;% \n  predict(new_data = wrmodeling) %&gt;%\n  bind_cols(wrmodeling) \n\nlinearpredict |&gt; \n  select(player, nfl_team, overall, .pred) |&gt; \n  top_n(10, wt=.pred) |&gt; \n  arrange(desc(.pred)) |&gt; \n  gt() |&gt; \n  cols_label(\n    player = \"Player\",\n    nfl_team = \"Team\",\n    overall = \"Pick\",\n    .pred = \"Predicted fantasy points\"\n  )  |&gt;\n  tab_header(\n    title = \"Predicting the top fantasy rookie wide receivers\",\n    subtitle = \"Using draft grades, college production, where they were drafted and who they were drafted by, these rookie receivers have good signs to be a valuable pickup for your fantasy team this season. Call the predicted points a safe bet -- an average outcome -- not a ceiling.\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Henry Goodwin  |  **Source:** CFDB, Pro-Football Reference\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      Predicting the top fantasy rookie wide receivers\n    \n    \n      Using draft grades, college production, where they were drafted and who they were drafted by, these rookie receivers have good signs to be a valuable pickup for your fantasy team this season. Call the predicted points a safe bet -- an average outcome -- not a ceiling.\n    \n    \n      Player\n      Team\n      Pick\n      Predicted fantasy points\n    \n  \n  \n    Xavier Worthy\nKansas City Chiefs\n28\n82.65170\n    Ricky Pearsall\nSan Francisco 49ers\n31\n81.08745\n    Keon Coleman\nBuffalo Bills\n33\n80.30604\n    Brian Thomas Jr.\nJacksonville Jaguars\n23\n76.68702\n    Ladd McConkey\nLos Angeles Chargers\n34\n72.22293\n    Marvin Harrison Jr.\nArizona Cardinals\n4\n69.50561\n    Malik Nabers\nNew York Giants\n6\n68.94637\n    Rome Odunze\nChicago Bears\n9\n67.65410\n    Adonai Mitchell\nIndianapolis Colts\n52\n62.07923\n    Ja'Lynn Polk\nNew England Patriots\n37\n60.05788\n  \n  \n    \n      By: Henry Goodwin  |  Source: CFDB, Pro-Football Reference"
  },
  {
    "objectID": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#xavier-worthy-kansas-city-cheifs-drafted-28",
    "href": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#xavier-worthy-kansas-city-cheifs-drafted-28",
    "title": "Using data to predict which rookie wide receiver you should draft this fantasy season",
    "section": "1. Xavier Worthy, Kansas City Cheifs, Drafted #28",
    "text": "1. Xavier Worthy, Kansas City Cheifs, Drafted #28\nWe all saw that video of Xavier Worthy breaking the record for the fastest 40 yard dash in NFL combine history. It’s no surprise he has potential to be special, and then to see him get picked by Kansas City automatically puts one idea in everyone’s heads: Tyreek 2.0. Worthy had three solid years at Texas, with 197 receptions for over 2,700 yards, including a 1,000 yard season this past season. Worthy is also coming into a Kansas City squad in need of receivers, so it’s likely he’ll see a lot of the field. Not to mention, the guy throwing him the ball is Patrick Mahomes."
  },
  {
    "objectID": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#ricky-pearsall-san-francisco-49ers-drafted-31",
    "href": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#ricky-pearsall-san-francisco-49ers-drafted-31",
    "title": "Using data to predict which rookie wide receiver you should draft this fantasy season",
    "section": "2. Ricky Pearsall, San Francisco 49ers, Drafted #31",
    "text": "2. Ricky Pearsall, San Francisco 49ers, Drafted #31\nKnown for his quick route running and effective footwork, Pearsall led Florida in receiving yards last season with 965. He’s proven that he can be a reliable option downfield with hands that can grab any ball that comes his way. Also with trade rumors surrounding Brandon Aiyuk and Deebo Samuel, Pearsall could potentially be a reliable option for San Francisco this season."
  },
  {
    "objectID": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#keon-coleman-buffalo-bills-drafted-33",
    "href": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#keon-coleman-buffalo-bills-drafted-33",
    "title": "Using data to predict which rookie wide receiver you should draft this fantasy season",
    "section": "3. Keon Coleman, Buffalo Bills, Drafted #33",
    "text": "3. Keon Coleman, Buffalo Bills, Drafted #33\nKeon Coleman has the physicality of a tight end and the explosivity of an elite wide receiver. His size and agility make him a nightmare to bring down. The Buffalo Bills have some big shoes to fill with the departure of Steffon Diggs and Gabe Davis. Pair that with the arm talent of Josh Allen and you’ve got a solid duo."
  },
  {
    "objectID": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#brian-thomas-jr.-jacksonville-jaguars-drafted-23",
    "href": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#brian-thomas-jr.-jacksonville-jaguars-drafted-23",
    "title": "Using data to predict which rookie wide receiver you should draft this fantasy season",
    "section": "4. Brian Thomas Jr., Jacksonville Jaguars, Drafted #23",
    "text": "4. Brian Thomas Jr., Jacksonville Jaguars, Drafted #23\nAfter having a breakout year at LSU alongside Malik Nabers, while catching throws from Heisman winner Jayden Daniels, Brian Thomas Jr. looks like he could easily be a second option for Trevor Lawrence. This past season, Thomas Jr. recorded 17 touchdowns and 1,177 yards for LSU. Thomas Jr. also helped the Tigers to record the highest scoring offense in college football last season."
  },
  {
    "objectID": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#ladd-mcconkey-los-angeles-chargers-drafted-34",
    "href": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#ladd-mcconkey-los-angeles-chargers-drafted-34",
    "title": "Using data to predict which rookie wide receiver you should draft this fantasy season",
    "section": "5. Ladd McConkey, Los Angeles Chargers, Drafted #34",
    "text": "5. Ladd McConkey, Los Angeles Chargers, Drafted #34\nA huge concern for the Chargers this offseason was their receiving core, as it had almost entirely been dismantled. Ladd McConkey might be just what Jim Harbaugh needs. McConkey is as versatile as they come, he can play in the slot, he can play out wide, he was even an effective punt returner during his time at Georgia. However, one minor concern is his durability, as the former Bulldog missed five games last season for two separate injuries."
  },
  {
    "objectID": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#marvin-harrison-jr.-arizona-cardinals-drafted-4",
    "href": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#marvin-harrison-jr.-arizona-cardinals-drafted-4",
    "title": "Using data to predict which rookie wide receiver you should draft this fantasy season",
    "section": "6. Marvin Harrison Jr., Arizona Cardinals, Drafted #4",
    "text": "6. Marvin Harrison Jr., Arizona Cardinals, Drafted #4\nThe first wide receiver off the board was taken for good reason, he has every trait you could want for a star receiver. He’s quick, has great hands, elite body control, he’s the whole package. So why is he 6th on the list. Not only has Marvin Harrison Jr. been battling through injury recently, but so has his new quarterback, Kylar Murray. The Cardinals also have a very weak offensive line, which might make it tough to get any deep balls to Harrison Jr. The former Buckeye isn’t going into the best offense, but he still has the potential to be lethal."
  },
  {
    "objectID": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#malik-nabers-new-york-giants-drafted-6",
    "href": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#malik-nabers-new-york-giants-drafted-6",
    "title": "Using data to predict which rookie wide receiver you should draft this fantasy season",
    "section": "7. Malik Nabers, New York Giants, Drafted #6",
    "text": "7. Malik Nabers, New York Giants, Drafted #6\nMalik Nabers was the number one target of Heisman winner Jayden Daniels at LSU, racking up over 1,500 yards in 14 games, averaging almost 18 yards per reception. The quarterback situation in New York was less than ideal last season, with Daniel Jones tearing his ACL in Week 9 of the NFL season. The Giants might also switch around their offensive plan of attack, after Saquon Barkley signed with the Philadelphia Eagles, which might give Nabers more opportunities. Even if Daniel Jones is back though, he only has 20 more touchdowns than interceptions, so it might be tough for Nabers."
  },
  {
    "objectID": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#rome-odunze-chicago-bears-drafted-9",
    "href": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#rome-odunze-chicago-bears-drafted-9",
    "title": "Using data to predict which rookie wide receiver you should draft this fantasy season",
    "section": "8. Rome Odunze, Chicago Bears, Drafted #9",
    "text": "8. Rome Odunze, Chicago Bears, Drafted #9\nRome Odunze might be the most unpredictable receiver on this list, and that’s for one reason that’s entirely out of his control. We don’t know how good Caleb Williams is. Chicago might have the next great receiving trio in DJ Moore, Keenan Allen, and Rome Odunze, which is great for Bears fans, but it means less targets for Odunze, meaning less fantasy points. Looking at just Odunze, he led college football in receiving yards with 1,640, which is still impressive despite having 1-2 more games than most other receivers."
  },
  {
    "objectID": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#adonai-mitchell-indianapolis-colts-drafted-52",
    "href": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#adonai-mitchell-indianapolis-colts-drafted-52",
    "title": "Using data to predict which rookie wide receiver you should draft this fantasy season",
    "section": "9. Adonai Mitchell, Indianapolis Colts, Drafted #52",
    "text": "9. Adonai Mitchell, Indianapolis Colts, Drafted #52\nAdonai Mitchell has proven composure in big moments, catching five career CFP touchdowns and winning the national championship with Georgia twice. Last season with Texas he had his most productive year, with 845 yards on 55 catches and 11 touchdowns to go along with it. The reason he’s ranked so low is uncertainty at the quarterback position. Anthony Richardson only played five games for the Colts in his rookie season last year before undergoing season ending surgery on his throwing shoulder."
  },
  {
    "objectID": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#jalynn-polk-new-england-patriots-drafted-37",
    "href": "posts/predicting-top-10-fantasy-rookie-wide-receivers/index.html#jalynn-polk-new-england-patriots-drafted-37",
    "title": "Using data to predict which rookie wide receiver you should draft this fantasy season",
    "section": "10. Ja’Lynn Polk, New England Patriots, Drafted #37",
    "text": "10. Ja’Lynn Polk, New England Patriots, Drafted #37\nJa’Lynn Polk was the second receiver for the Washington Huskies behind Rome Odunze, but still found a way to pave his own path. Rookie quarterbacks are always a toss up, and Drake Maye’s performance is even more unpredictable than Caleb Williams’. The Patriots aren’t even sure if he’ll start over Jacoby Brissett, which might not be the best sign. Looking at other receivers on the Patriots, it’s likely that Polk will start, and won’t have too much competition, so he should get plenty of snaps."
  }
]