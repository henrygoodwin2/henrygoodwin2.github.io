[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/husker-soccer-offense-vs-defense-goals/index.html",
    "href": "posts/husker-soccer-offense-vs-defense-goals/index.html",
    "title": "The Husker women’s soccer season was capped off by an electric offense followed by a subpar defense",
    "section": "",
    "text": "Nebraska just wrapped up a fantastic season with a trip to the Elite Eight and a shared Big Ten regular-season championship. This makes it the third time the Huskers have made a quarterfinal appearance and was the first time they’ve done so since 1999. The team was spearheaded by one of the best-scoring offenses in the nation, slotting home 67 goals through 24 games. To put that into perspective, if you combine the goals scored by the Huskers in the two previous seasons, you get a total of 61 goals. Nebraska outscored their two previous seasons combined by six goals. So Nebraska had a great season, but how did they fare in their conference when it came to goals scored? How many of those goals were penalties?\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggalt)\nlibrary(ggtext)\nlibrary(patchwork)\nlibrary(ggtext)\nlibrary(ggrepel)\nlibrary(waffle)\n\ngoaldiff&lt;- read_csv(\"Goal_Differential.csv\") |&gt; select(-Rank)\n\npensscored &lt;- read_csv(\"Penalties_Scored.csv\") |&gt; select(-Rank)\n\ngoals &lt;- goaldiff |&gt;\n  inner_join(pensscored)\n\nfixedgoals &lt;- goals |&gt;\n  separate(Team, into=c(\"Team\", \"Conference\"), sep=\"\\\\(\") |&gt;\n  mutate(Conference=gsub(\")\", \"\", Conference))\n\nbiggoals &lt;- fixedgoals |&gt;\n  filter(Conference == \"Big Ten\") |&gt;\n  mutate(nonpkgoal = Goals-PS) |&gt;\n  select(Team, PS, nonpkgoal)\n\nbiggoalswide&lt;- biggoals |&gt;\n  pivot_longer(\n  cols=-Team,\n  names_to=\"Type\",\n  values_to=\"Goal\")\n\nggplot()+\n  geom_bar(data=biggoalswide, aes(x=reorder(Team, Goal), weight=Goal, fill=Type)) +\n  scale_fill_manual(values=c(\"darkgreen\",\"red\"), name=\"Goals\", labels=c(\"Non-penalty goals\",\"Penalties\")) +\n  coord_flip() +\n  labs(\n    title = \"Nebraska scored a massive amount of goals, with little help from penalties\",\n    subtitle = \"The Huskers' electric offense helped them win the Big Ten and make the elite eight\",\n    caption = \"Source = stats.ncaa.com | Henry Goodwin\",\n    x=\"\",\n    y=\"Goals\"\n  ) +\n   theme_minimal()+\n      theme(plot.title = element_text(size = 14, face = \"bold\"),\n            plot.subtitle = element_text(size = 10),\n            axis.title = element_text(size = 10),  \n            plot.title.position = \"plot\") \n\n\n\n\n\nNebraska doesn’t get many penalties, but neither does the rest of the Big Ten. Maybe players don’t go down in the box as much, or refs just don’t feel inclined to call them out. Either way, the NCAA doesn’t track stuff like that, so without going to the film room there’s no way to know. One thing you can see, however, is that Michigan State scored the most penalties in the conference, and that’s who we share our regular season title with. Breaking it down further, if you look past the team statistics, there will be reoccurring names on the stat sheet for Nebraska. Eleanor Dale, Florence Belzile, and Sarah Weber were all nightmares for defenders and goalkeepers this season. Eleanor Dale had a phenomenal year, leading the nation in goals scored and breaking the school record for goals scored in a season. If there was a Golden Boot awarded in collegiate women’s soccer, Eleanor Dale would have it on lock this season.\n\n\nCode\ngoalastleaders &lt;- read_csv(\"Point_Leaders.csv\")\n\nfixedleaders &lt;- goalastleaders |&gt;\n  separate(Player, into=c(\"Player\", \"Team\"), sep=\",\") |&gt;\n  separate(Team, into=c(\"Team\", \"Conference\"), sep=\"\\\\(\") |&gt;\n  mutate(Conference=gsub(\")\", \"\", Conference))\n\nnu &lt;- fixedleaders |&gt; filter(str_trim(Team) == \"Nebraska\")\n\nggplot() +\n  geom_point(data=fixedleaders, aes(x=Goals, y=Assists)) +\n  geom_point(data=nu, aes(x=Goals, y=Assists),color=\"#E41C38\") +\n  geom_text_repel(data=nu, aes(x=Goals, y=Assists, label=Player)) +\n  \n  labs(\n    title = \"Nebraska's players dominated the rankings in goals and assists.\",\n    subtitle = \"The dynamic duo of Eleanor Dale and Florence Belzile allowed the Huskers to average nearly three goals a game.\",\n    caption = \"Source = stats.ncaa.com | Henry Goodwin\",\n    x=\"Goals\",\n    y=\"Assists\"\n  ) +\n   theme_minimal()+\n      theme(plot.title = element_text(size = 14, face = \"bold\"),\n            plot.subtitle = element_text(size = 10),\n            axis.title = element_text(size = 10),  \n            plot.title.position = \"plot\") \n\n\n\n\n\nNebraska’s top players are mostly outliers on a list of great players. To be on the list, players had to average at least one point a game. Points are decided by the number of goals and assists a player has. One goal = 2 points, one assist = 1 point. So, if Nebraska’s offense was so good, why didn’t they make it to the college cup? Well, even if a team looks solid, upsets happen right? Well, not in Nebraska’s case. Nebraska had one weak spot, and it was their defense. Nebraska was ranked 151st when it came to average goals allowed. Unfortunately, the NCAA doesn’t keep defensive actions as statistics so clean sheets are about the only measurement of a team’s defensive performance one can get. Nebraska was one win short of making the college cup, and if they want to be a team that can contend for championships, not allowing goals needs to be a priority.\n\n\nCode\nshutout &lt;- read_csv(\"Team_Shutout.csv\")\n\nfixedshut &lt;- shutout |&gt;\n  separate(Team, into=c(\"Team\", \"Conference\"), sep=\"\\\\(\") |&gt;\n  mutate(Conference=gsub(\")\", \"\", Conference)) |&gt;\n  mutate(nonshutouts = `Team Games`-Shutouts)\n\n\nnushut &lt;- c(\"Games without a cleansheet\"=17, \"Cleansheets\"=7,1)\nfsu &lt;- c(\"Games without a cleansheet\"=8, \"Cleansheets\"=13,4)\nbyu &lt;- c(\"Games without a cleansheet\"=16, \"Cleansheets\"=9)\nclem &lt;- c(\"Games without a cleansheet\"=11, \"Cleansheets\"=14)\nstan &lt;- c(\"Games without a cleansheet\"=10, \"Cleansheets\"=13,2)\n\niron(\n  waffle(nushut,\n         rows=2,\n         xlab=\"Nebraska's keepers | 1 square = 1 game\",\n         colors = c(\"#FDF2D9\", \"#E41C38\", \"white\")) +\n    labs(\n    title = \"The Huskers' lackluster defense kept them out of the college cup\",\n    subtitle = \"scoring a ton of goals can only get a team so far, if Nebraska wants to contend, defenders and keepers need to step up.\") +\n      theme(plot.title = element_text(size = 14, face = \"bold\"),\n            plot.subtitle = element_text(size = 10),\n            axis.title = element_text(size = 10),  \n            plot.title.position = \"plot\"),\n  waffle(fsu,\n         rows=2,\n         xlab=\"Florida State's keepers | 1 square = 1 game\",\n         colors = c(\"#782F40\", \"#CEB888\", \"white\")),\n  waffle(byu,\n         rows=2,\n         xlab=\"BYU's keepers | 1 square = 1 game\",\n         colors = c(\"#002E5D\", \"#0062B8\")),\n  waffle(clem,\n         rows=2,\n         xlab=\"Clemson's keepers | 1 square = 1 game\",\n         colors = c(\"#F56600\", \"#522D80\")),\n  waffle(stan,\n         rows=2,\n         xlab=\"Stanford's keepers | 1 square = 1 game\",\n         colors = c(\"#8C1515\", \"#4D4F53\", \"white\"))+\n    labs(\n      caption = \"Source = stats.ncaa.com | Henry Goodwin\"\n    ))\n\n\n\n\n\nNebraska had a phenomenal season led by Eleanor Dale’s record-breaking 28 goals. By all metrics, this season was a huge improvement from previous seasons and John Walker has a lot to be proud of. It’s no surprise he was named Big Ten Coach of the Year. However, if Nebraska wants any chance of being a title contender, they need to tighten up on defense."
  },
  {
    "objectID": "posts/introduction/index.html",
    "href": "posts/introduction/index.html",
    "title": "About Me!",
    "section": "",
    "text": "Hi. My name is Henry Goodwin, I am a student at the University of Nebraska Lincoln. I am double majoring in Sports Media & Communications and Broadcasting with a minor in merchandising. I am currently a junior at UNL, where this year I am interning for the Huskers Radio Network, where I assist in the production of broadcasts for six different sports (football, volleyball, men’s and women’s basketball, softball, baseball). When there isn’t a game going on that we cover, I also help produce Sports Nightly, a live two hour talk show/podcast about all things Nebraska athletics. This past summer I interned for the Lincoln Saltdogs, the local pro baseball team, where I would assist in all facets of game day operation: Promotions, ticket sales, mascot handling, national anthem, first pitch, welcome center, fun zone. On non game days we would come in for box office shifts and occasionally suit up as the mascot for a mascot appearance."
  },
  {
    "objectID": "posts/chelsea-bad-spending-habits/index.html",
    "href": "posts/chelsea-bad-spending-habits/index.html",
    "title": "Looking at Chelsea’s performance after an expensive transfer window",
    "section": "",
    "text": "It’s no surprise that Chelsea have had a few disappointing seasons in recent years, but what really went wrong from winning a Champions League title in 2021 to being middle of the table in 2023? Nearly two years after Todd Boehly (and some smaller investors) bought Chelsea for 4.25 billion euros, a lot has changed at the historic London club. Four different managers have been at the helm, and the entire roster has also virtually changed, with only three players remaining. Chelsea has definitely spent like they’re a top table team, but just how far off are their expenditure rankings from their league rankings?\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggalt)\nlibrary(ggtext)\nlibrary(patchwork)\nlibrary(ggtext)\nlibrary(ggrepel)\n\nspenders &lt;- read_csv(\"soccerspending1.csv\")\n\nfixedspenders &lt;- spenders |&gt;\n  mutate(Transfer_expenditures = gsub(\"€\", \"\", Transfer_expenditures, fixed=TRUE )) |&gt;\n  mutate(Transfer_expenditures = gsub(\"m\", \"\", Transfer_expenditures, fixed=TRUE )) |&gt; \n  mutate(Transfer_expenditures = as.numeric(Transfer_expenditures))\n\nstandings &lt;- read_csv(\"Epl_Standings1.csv\")\n\nCFC &lt;- fixedspenders |&gt; filter(club == \"Chelsea FC\")\n\nSU &lt;- fixedspenders |&gt; filter(club == \"Sheffield United\")\n\nMCI &lt;- fixedspenders |&gt; filter(club == \"Manchester City\")\n\nBHA &lt;- fixedspenders |&gt; filter(club == \"Brighton & Hove Albion\")\n\nblues &lt;- standings |&gt; filter(Squad == \"Chelsea\")\n\n ggplot() +\n  geom_dumbbell (data=spenders, aes(y=reorder(club, -Expenditure_rank), x=Expenditure_rank, xend=League_position),\nsize = 2,                 \ncolour = \"grey\",\ncolour_x = \"red\", \ncolour_xend = \"green\") +\n  geom_dumbbell (data=CFC, aes(y=reorder(club, -Expenditure_rank), x=Expenditure_rank, xend=League_position),\nsize = 2,                 \ncolour = \"#034694\",\ncolour_x = \"red\", \ncolour_xend = \"green\") +\n  labs (\n    title = \"Chelsea lead the league in spending, but fall short in wins\",\nsubtitle = \"If a team's line is on the left, they're overperforming in relation to how much they spent, and if a team's\non the right, they're underperforming. Chelsea is underperforming by a significant margin.\", \ncaption = \"Source: transfermarkt.com | Henry Goodwin\",\nx = \"&lt;span style = 'color:red;' &gt;Expenditure Rank&lt;/span&gt; vs &lt;span style = 'color:green;'&gt;League Ranking&lt;/span&gt;\",\ny=\"\"\n  ) +\n      theme_minimal()+\n      theme(plot.title = element_text(size = 16, face = \"bold\"),\n            plot.subtitle = element_text(size = 10),\n            axis.title = element_text(size = 8),  \n            plot.title.position = \"plot\",\n axis.title.x = element_textbox_simple(size = 10, halign=.5))\n\n\n\n\n\nTheir expenditure ranking is really high, but what are they spending all this money on? Looking back at the last window, they spent a total of 611 million euros, with notable signings including Enzo Fernandez for 121 million euros, Wesley Fofana for 80 million euros, and Mykhaylo Mudryk for just over 100 million euros, just to name a few. Now if you look at the most recent transfer window, Chelsea eased up on the checkbook this season, spending around 460 million euros, still leading the premier league, but a decent amount less than the previous season. Some of the notable signings from that window include Moises Caicedo for 116 million euros, Romeo Lavia for 62 million euros, and Christopher Nkunku for 60 million euros. So, with a roster worth 1 billion euros, on paper this team should be really good, right?\n\n\nCode\nggplot() + \n  geom_point(\n    data=fixedspenders, \n    aes(x=goals, y=goals_allowed, size=Transfer_expenditures) \n    ) + \n  scale_size(range = c(3,8), name=\"Euros spent in millions\") +\n  \n   geom_point(\n    data=CFC, \n    aes(x=goals, y=goals_allowed, size=Transfer_expenditures), color=\"#034694\"\n    ) + \n   geom_point(\n    data=MCI, \n    aes(x=goals, y=goals_allowed, size=Transfer_expenditures), color=\"#6CABDD\"\n    ) + \n   geom_point(\n    data=SU, \n    aes(x=goals, y=goals_allowed, size=Transfer_expenditures), color=\"#EE2737\"\n    ) + \n  geom_point(\n    data=BHA, \n    aes(x=goals, y=goals_allowed, size=Transfer_expenditures), color=\"#0057B8\"\n    ) + \n  geom_text_repel(\n    data=CFC,\n    aes(x=goals, y=goals_allowed, label=club)) +\n  geom_text_repel(\n    data=MCI,\n    aes(x=goals, y=goals_allowed, label=club)) +\n  geom_text_repel(\n    data=SU,\n    aes(x=goals, y=goals_allowed, label=club)) +\n  geom_text_repel(\n    data=BHA,\n    aes(x=goals, y=goals_allowed, label=club)) +\n geom_vline(xintercept = 16.65) +\n  geom_hline(yintercept = 16.65) +\n  geom_text(aes(x=11, y=9, label=\"Bad Scorers, Good Defenders\"),color=\"red\", size=3) +\n  geom_text(aes(x=22.5, y=25, label=\"Good Scorers, Bad Defenders\"),color=\"red\", size=3) +\n  labs(\n    title = \"Chelsea's recent scoring surge eclipses their defensive consistency\",\n    subtitle = \"The blues have up until now, scored a lackluster amount of goals, despite all their financial efforts\",\n    caption = \"Source = transfermarkt.com | Henry Goodwin\",\n    x=\"Goals Scored\",\n    y=\"Goals Allowed\"\n  ) +\n   theme_minimal()+\n      theme(plot.title = element_text(size = 14, face = \"bold\"),\n            plot.subtitle = element_text(size = 10),\n            axis.title = element_text(size = 10),  \n            plot.title.position = \"plot\")\n\n\n\n\n\nSo, they aren’t the best, but Chelsea has been showing small signs of improvement. Their recent 4-1 win against 9-man Tottenham surely helped, even if they should’ve scored more. Nicolas Jackson’s hat trick in that game also made him Chelsea’s leading scorer with 6 goals on the season, overtaking Raheem Sterling’s 4. Mudryk on the other hand has had a slow start in his time at Chelsea, not scoring at all in 15 appearances in his first season. He has been doing a bit better this season with 2 goals in 9 appearances, but still not impressive when you consider how much Chelsea paid for him. some things just take time though, maybe Chelsea is back on the path to eventually winning Champions Leagues, but they need to get better as a team first. Ultimately, a team wants to score goals to win. If you want to score goals you need to be able to pass, create shots, and be able to capitalize those shot creations with shots on target to give your team a chance to score. So how has Chelsea been this season in all those categories?\n\n\nCode\nbar1 &lt;- ggplot() +\n  geom_bar(data=standings, aes(x=reorder(Squad, `Cmp%`), weight=`Cmp%`), fill=\"lightgrey\") +\n  geom_bar(data=blues, aes(x=reorder(Squad, `Cmp%`), weight=`Cmp%`), fill=\"#034694\") +\n  coord_flip() + \n  labs(\n    x=\"\",\n    y=\"Passing Percentage\") +\n  theme_minimal()\n\nbar3 &lt;- ggplot() +\n  geom_bar(data=standings, aes(x=reorder(Squad, `SoT%`), weight=`SoT%`), fill=\"lightgrey\") +\n  geom_bar(data=blues, aes(x=reorder(Squad, `SoT%`), weight=`SoT%`), fill=\"#034694\") +\n  coord_flip() + \n  labs(\n    x=\"\",\n    y=\"Shot on Target Percentage\") + \n  theme_minimal()\n    \n bar2 &lt;-  ggplot() +\n  geom_bar(data=standings, aes(x=reorder(Squad, SCA), weight=SCA), fill=\"lightgrey\") +\n  geom_bar(data=blues, aes(x=reorder(Squad, SCA), weight=SCA), fill=\"#034694\") +\n  coord_flip() + \n  labs(\n    x=\"\",\n    y=\"Shot Creating Actions\") + \n   theme_minimal()\n  \n bar1+bar2+bar3 +\n   plot_annotation(\n     title = \"Chelsea is great at passing, ok at creating shots, but poor at shooting on target\",\n     subtitle = \"Todd Boehly has completely upended Chelsea's 2021 Champions League winning squad for 9 figure strikers who struggle to find the back of the net.\",\n     caption = \"Source: fbref.com | By Henry Goodwin\"\n   ) & theme(\n     plot.title = element_text(size = 16, face = \"bold\"),\n     plot.subtitle = element_text(size = 10),\n     axis.title = element_text(size = 8),  \n     plot.title.position = \"plot\"\n     ) \n\n\n\n\n\nWell, at least they’re good at something, passing is the first step, and again, this entire squad hasn’t had much time together. Hopefully for Todd Boehly’s sake, the team picks up their slack on creating shots, and more importantly, shooting on target. One can only imagine the depression and anguish brought on by getting so few results after spending 1 BILLION euros on players. Maybe things will get better for Chelsea, but until then, London is most definitely not blue."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "How I filled out my NCAA tournament bracket using machine learning algorithms\n\n\n\n\n\n\n\nncaa\n\n\nbasketball\n\n\nmachine learning\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2024\n\n\nHenry Goodwin\n\n\n\n\n\n\n  \n\n\n\n\nThe Husker women’s soccer season was capped off by an electric offense followed by a subpar defense\n\n\n\n\n\n\n\ncode\n\n\nsoccer\n\n\nnebraska\n\n\n\n\n\n\n\n\n\n\n\nDec 1, 2023\n\n\nHenry Goodwin\n\n\n\n\n\n\n  \n\n\n\n\nLooking at Chelsea’s performance after an expensive transfer window\n\n\n\n\n\n\n\ncode\n\n\nsoccer\n\n\nchelsea\n\n\n\n\n\n\n\n\n\n\n\nNov 10, 2023\n\n\nHenry Goodwin\n\n\n\n\n\n\n  \n\n\n\n\nAbout Me!\n\n\n\n\n\n\n\nsports\n\n\ndata\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nHenry Goodwin\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/using-machine-learning-data-to-predict-ncaa-tournament-bracket/index.html",
    "href": "posts/using-machine-learning-data-to-predict-ncaa-tournament-bracket/index.html",
    "title": "How I filled out my NCAA tournament bracket using machine learning algorithms",
    "section": "",
    "text": "Recently, in my advanced sports data analysis class, we were tasked with designing a model using a machine learning algorithm to make a bracket for the NCAA tournament. A tournament that is notoriously unpredictable.\nNow I only made two other brackets using my own judgement, and I’ll use the word judgement lightly because I had Nebraska winning in one of them. But the model I made using machine learning outperformed both of them.\nNot only did I have UConn winning in my bracket, but so did nearly the rest of the class and the rest of America. Even though I got it right, upsets are still a little more fun.\nMy Final Four was 50% right, but my model for some reason really favored all the one seeds in the tournament, which isn’t entirely a bad thing. After all, they are one seeds for a reason.\nGoing into the tournament I was incredibly doubtful with some of the picks my model made, because who in their right mind would have Oakland beating Kentucky? Trying to predict the outcome of this tournament is incredibly difficult, but let’s see what went wrong, and what went right.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(tidymodels)\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n✔ broom        1.0.5     ✔ rsample      1.2.0\n✔ dials        1.2.0     ✔ tune         1.1.2\n✔ infer        1.0.5     ✔ workflows    1.1.3\n✔ modeldata    1.3.0     ✔ workflowsets 1.0.1\n✔ parsnip      1.1.1     ✔ yardstick    1.3.0\n✔ recipes      1.0.9     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n\n\nCode\nlibrary(hoopR)\nlibrary(zoo)\n\n\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\nCode\nlibrary(gt)\n\n\n\nset.seed(1234)\n\ngames &lt;- load_mbb_team_box(seasons = 2015:2024) |&gt; filter(game_date &lt; as.Date(\"2024-03-18\"))\n\n\noppreb &lt;- games |&gt; select(game_id, team_id, total_rebounds) |&gt; rename(opponent_team_id = team_id, opponent_rebounds = total_rebounds)\n\ngameswithreb &lt;- games |&gt; inner_join(oppreb)\n\n\nJoining with `by = join_by(game_id, opponent_team_id)`\n\n\nCode\nnond1 &lt;- gameswithreb |&gt; \n  group_by(team_id, season) |&gt;\n  tally() |&gt; filter(n &lt; 10 & season != 2021) |&gt;\n  select(team_id)\n\nnond1 &lt;- pull(nond1)\n\ndf &lt;- gameswithreb |&gt; filter(!team_id %in% nond1 & !opponent_team_id %in% nond1)\n\nteamside &lt;- df |&gt; \n  group_by(team_id, season) |&gt; \n  arrange(game_date) |&gt; \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_offensive_efficiency = lag(cummean(team_offensive_efficiency), n=1),\n    team_season_defensive_efficiency = lag(cummean(team_defensive_efficiency), n=1),  \n    score_margin = team_score - opponent_team_score,\n    team_rolling_mean_offensive_efficiency = rollmean(lag(team_offensive_efficiency, n=1), k=5, align = \"right\", fill=NA),\n    team_rolling_mean_defensive_efficiency = rollmean(lag(team_defensive_efficiency, n=1), k=5, align = \"right\", fill=NA),\n    absolute_score_margin = abs(score_margin),\n    rebound_margin = total_rebounds - opponent_rebounds,\n    team_rolling_rebound_margin = rollmean(lag(rebound_margin, n=1), k=5, align = \"right\", fill =NA)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt;\n  ungroup()\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    team_opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    team_opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    team_rolling_mean_opponent_offensive_efficiency = team_rolling_mean_offensive_efficiency,\n    team_rolling_mean_opponent_defensive_efficiency = team_rolling_mean_defensive_efficiency,\n    team_opponent_rolling_rebound_margin = team_rolling_rebound_margin\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    team_opponent_season_offensive_efficiency,\n    team_opponent_season_defensive_efficiency, \n    team_rolling_mean_opponent_offensive_efficiency,\n    team_rolling_mean_opponent_defensive_efficiency,\n    team_opponent_rolling_rebound_margin\n  )\n  \n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\n\nJoining with `by = join_by(game_id, opponent_team_id)`\n\n\nCode\nbothsides &lt;- bothsides |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\"\n)))\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season, \n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    team_opponent_season_offensive_efficiency,\n    team_opponent_season_defensive_efficiency, \n    team_rolling_mean_opponent_offensive_efficiency,\n    team_rolling_mean_offensive_efficiency,\n    team_rolling_mean_opponent_defensive_efficiency,\n    team_rolling_mean_defensive_efficiency,\n    team_result, \n    team_rolling_rebound_margin\n    ) |&gt; na.omit()\n\ngame_split &lt;- initial_split(modelgames, prop = .8)\ngame_train &lt;- training(game_split)\ngame_test &lt;- testing(game_split)\n\ngame_recipe &lt;- \n  recipe(team_result ~ ., data = game_split) |&gt; \n  update_role(game_id, game_date, team_short_display_name, opponent_team_short_display_name, season, new_role = \"ID\") |&gt;\n  step_normalize(all_predictors())\n\n\nlog_mod &lt;- \n  logistic_reg() |&gt; \n  set_engine(\"glm\") |&gt;\n  set_mode(\"classification\")\n\nrf_mod &lt;- \n  rand_forest() |&gt; \n  set_engine(\"ranger\") |&gt;\n  set_mode(\"classification\")\n\nlog_workflow &lt;- \n  workflow() |&gt; \n  add_model(log_mod) |&gt; \n  add_recipe(game_recipe)\n\nrf_workflow &lt;- \n  workflow() |&gt; \n  add_model(rf_mod) |&gt; \n  add_recipe(game_recipe)\n\nlog_fit &lt;- \n  log_workflow |&gt; \n  fit(data = game_train)\n\nrf_fit &lt;- \n  rf_workflow |&gt; \n  fit(data = game_train)\n\nlogpredict &lt;- log_fit |&gt; predict(new_data = game_train) |&gt;\n  bind_cols(game_train) \n\nlogpredict &lt;- log_fit |&gt; predict(new_data = game_train, type=\"prob\") |&gt;\n  bind_cols(logpredict)\n\nrfpredict &lt;- rf_fit |&gt; predict(new_data = game_train) |&gt;\n  bind_cols(game_train) \n\nrfpredict &lt;- rf_fit |&gt; predict(new_data = game_train, type=\"prob\") |&gt;\n  bind_cols(rfpredict)\n\nmetrics(logpredict, team_result, .pred_class)\n\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.680\n2 kap      binary         0.359\n\n\nCode\nmetrics(rfpredict, team_result, .pred_class)\n\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.995\n2 kap      binary         0.990\n\n\nCode\nlogtestpredict &lt;- log_fit |&gt; predict(new_data = game_test) |&gt;\n  bind_cols(game_test)\n\nlogtestpredict &lt;- log_fit |&gt; predict(new_data = game_test, type=\"prob\") |&gt;\n  bind_cols(logtestpredict)\n\nmetrics(logtestpredict, team_result, .pred_class)\n\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.672\n2 kap      binary         0.344\n\n\nCode\nrftestpredict &lt;- rf_fit |&gt; predict(new_data = game_test) |&gt;\n  bind_cols(game_test)\n\nrftestpredict &lt;- rf_fit |&gt; predict(new_data = game_test, type=\"prob\") |&gt;\n  bind_cols(rftestpredict)\n\nmetrics(rftestpredict, team_result, .pred_class)\n\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.664\n2 kap      binary         0.328\n\n\nCode\nteamside &lt;- df |&gt; \n  group_by(team_id, season) |&gt; \n  arrange(game_date) |&gt; \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_offensive_efficiency = cummean(team_offensive_efficiency),\n    team_season_defensive_efficiency = cummean(team_defensive_efficiency),  \n    score_margin = team_score - opponent_team_score,\n    team_rolling_mean_offensive_efficiency = rollmean(team_offensive_efficiency, k=5, align = \"right\", fill=NA),\n    team_rolling_mean_defensive_efficiency = rollmean(team_defensive_efficiency, k=5, align = \"right\", fill=NA),\n    absolute_score_margin = abs(score_margin),\n    rebound_margin = total_rebounds - opponent_rebounds, \n    team_rolling_rebound_margin = rollmean(rebound_margin, k=5, align = \"right\", fill =NA)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt;\n  ungroup()\n\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    team_opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    team_opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    team_rolling_mean_opponent_offensive_efficiency = team_rolling_mean_offensive_efficiency,\n    team_rolling_mean_opponent_defensive_efficiency = team_rolling_mean_defensive_efficiency,\n    team_opponent_rolling_rebound_margin = team_rolling_rebound_margin,\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    team_opponent_season_offensive_efficiency,\n    team_opponent_season_defensive_efficiency, \n    team_rolling_mean_opponent_offensive_efficiency,\n    team_rolling_mean_opponent_defensive_efficiency,\n    team_opponent_rolling_rebound_margin\n  )\n  \n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\n\nJoining with `by = join_by(game_id, opponent_team_id)`\n\n\nCode\nbothsides &lt;- bothsides |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\"\n)))\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season, \n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    team_opponent_season_offensive_efficiency,\n    team_opponent_season_defensive_efficiency, \n    team_rolling_mean_opponent_offensive_efficiency,\n    team_rolling_mean_offensive_efficiency,\n    team_rolling_mean_opponent_defensive_efficiency,\n    team_rolling_mean_defensive_efficiency,\n    team_result, \n    team_rolling_rebound_margin\n    ) |&gt; na.omit()\n\nplayingames &lt;- tibble(\n  team_short_display_name =\"Howard\",\n  opponent_team_short_display_name = \"Wagner\"\n) |&gt; add_row(\n  team_short_display_name = \"Boise St\",\n  opponent_team_short_display_name = \"Colorado\"\n) |&gt; add_row(\n  team_short_display_name = \"Montana St\",\n  opponent_team_short_display_name = \"Grambling\"\n) |&gt; add_row(\n  team_short_display_name = \"Colorado St\",\n  opponent_team_short_display_name = \"Virginia\"\n)\n\nplayingames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(playingames)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nplayingames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(playingames) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nplayin &lt;- rf_fit |&gt; predict(new_data = playingames) |&gt;\n  bind_cols(playingames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nplayin &lt;- rf_fit |&gt; predict(new_data = playingames, type=\"prob\") |&gt;\n  bind_cols(playin) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\neastround1games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Stetson\"\n) |&gt; add_row(\n  team_short_display_name=\"FAU\",\n  opponent_team_short_display_name=\"Northwestern\"\n) |&gt; add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"UAB\"\n) |&gt; add_row(\n  team_short_display_name=\"Auburn\",\n  opponent_team_short_display_name=\"Yale\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Duquesne\"\n) |&gt; add_row(\n  team_short_display_name=\"Illinois\",\n  opponent_team_short_display_name=\"Morehead St\"\n) |&gt; add_row(\n  team_short_display_name=\"Washington St\",\n  opponent_team_short_display_name=\"Drake\"\n) |&gt; add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_team_short_display_name=\"S Dakota St\"\n)\n\neastround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround1games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\neastround1 &lt;- rf_fit |&gt; predict(new_data = eastround1games) |&gt;\n  bind_cols(eastround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround1 &lt;- rf_fit |&gt; predict(new_data = eastround1games, type=\"prob\") |&gt;\n  bind_cols(eastround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\neastround2games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"FAU\"\n) |&gt; add_row(\n  team_short_display_name=\"UAB\",\n  opponent_team_short_display_name=\"Auburn\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Illinois\"\n) |&gt; add_row(\n  team_short_display_name=\"Drake\",\n  opponent_team_short_display_name=\"S Dakota St\"\n)\n\neastround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround2games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\neastround2 &lt;- rf_fit |&gt; predict(new_data = eastround2games) |&gt;\n  bind_cols(eastround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround2 &lt;- rf_fit |&gt; predict(new_data = eastround2games, type=\"prob\") |&gt;\n  bind_cols(eastround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\neastround3games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"UAB\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Drake\"\n) \n\neastround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround3games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\neastround3 &lt;- rf_fit |&gt; predict(new_data = eastround3games) |&gt;\n  bind_cols(eastround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround3 &lt;- rf_fit |&gt; predict(new_data = eastround3games, type=\"prob\") |&gt;\n  bind_cols(eastround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\neastround4games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"BYU\"\n) \n\neastround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\neastround4 &lt;- rf_fit |&gt; predict(new_data = eastround4games) |&gt;\n  bind_cols(eastround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround4 &lt;- rf_fit |&gt; predict(new_data = eastround4games, type=\"prob\") |&gt;\n  bind_cols(eastround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nwestround1games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Wagner\"\n) |&gt; add_row(\n  team_short_display_name=\"Mississippi St\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Grand Canyon\"\n) |&gt; add_row(\n  team_short_display_name=\"Alabama\",\n  opponent_team_short_display_name=\"Charleston\"\n) |&gt; add_row(\n  team_short_display_name=\"Clemson\",\n  opponent_team_short_display_name=\"New Mexico\"\n) |&gt; add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_team_short_display_name=\"Colgate\"\n) |&gt; add_row(\n  team_short_display_name=\"Dayton\",\n  opponent_team_short_display_name=\"Nevada\"\n) |&gt; add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_team_short_display_name=\"Long Beach St\"\n)\n\nwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround1games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nwestround1 &lt;- rf_fit |&gt; predict(new_data = westround1games) |&gt;\n  bind_cols(westround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround1 &lt;- rf_fit |&gt; predict(new_data = westround1games, type=\"prob\") |&gt;\n  bind_cols(westround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Charlston\"\n) |&gt; add_row(\n  team_short_display_name=\"New Mexico\",\n  opponent_team_short_display_name=\"Colgate\"\n) |&gt; add_row(\n  team_short_display_name=\"Dayton\",\n  opponent_team_short_display_name=\"Arizona\"\n) \n\nwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround2games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nwestround2 &lt;- rf_fit |&gt; predict(new_data = westround2games) |&gt;\n  bind_cols(westround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2 &lt;- rf_fit |&gt; predict(new_data = westround2games, type=\"prob\") |&gt;\n  bind_cols(westround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround3games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Saint Mary's\"\n) |&gt; add_row(\n  team_short_display_name=\"New Mexico\",\n  opponent_team_short_display_name=\"Dayton\"\n) \n\nwestround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround3games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nwestround3 &lt;- rf_fit |&gt; predict(new_data = westround3games) |&gt;\n  bind_cols(westround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround3 &lt;- rf_fit |&gt; predict(new_data = westround3games, type=\"prob\") |&gt;\n  bind_cols(westround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nwestround4games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"New Mexico\"\n) \n\nwestround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nwestround4 &lt;- rf_fit |&gt; predict(new_data = westround4games) |&gt;\n  bind_cols(westround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround4 &lt;- rf_fit |&gt; predict(new_data = westround4games, type=\"prob\") |&gt;\n  bind_cols(westround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Longwood\"\n) |&gt; add_row(\n  team_short_display_name=\"Nebraska\",\n  opponent_team_short_display_name=\"Texas A&M\"\n) |&gt; add_row(\n  team_short_display_name=\"Wisconsin\",\n  opponent_team_short_display_name=\"James Madison\"\n) |&gt; add_row(\n  team_short_display_name=\"Duke\",\n  opponent_team_short_display_name=\"Vermont\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas Tech\",\n  opponent_team_short_display_name=\"NC State\"\n) |&gt; add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_team_short_display_name=\"Oakland\"\n) |&gt; add_row(\n  team_short_display_name=\"Florida\",\n  opponent_team_short_display_name=\"Colorado\"\n) |&gt; add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_team_short_display_name=\"Western KY\"\n)\n\nsouthround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround1games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nsouthround1 &lt;- rf_fit |&gt; predict(new_data = southround1games) |&gt;\n  bind_cols(southround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1 &lt;- rf_fit |&gt; predict(new_data = southround1games, type=\"prob\") |&gt;\n  bind_cols(southround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Texas A&M\"\n) |&gt; add_row(\n  team_short_display_name=\"James Madison\",\n  opponent_team_short_display_name=\"Duke\"\n) |&gt; add_row(\n  team_short_display_name=\"NC State\",\n  opponent_team_short_display_name=\"Oakland\"\n) |&gt; add_row(\n  team_short_display_name=\"Colorado\",\n  opponent_team_short_display_name=\"Western KY\"\n) \n\nsouthround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround2games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nsouthround2 &lt;- rf_fit |&gt; predict(new_data = southround2games) |&gt;\n  bind_cols(southround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2 &lt;- rf_fit |&gt; predict(new_data = southround2games, type=\"prob\") |&gt;\n  bind_cols(southround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround3games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"James Madison\"\n) |&gt; add_row(\n  team_short_display_name=\"Oakland\",\n  opponent_team_short_display_name=\"Colorado\"\n)\n\nsouthround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround3games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nsouthround3 &lt;- rf_fit |&gt; predict(new_data = southround3games) |&gt;\n  bind_cols(southround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround3 &lt;- rf_fit |&gt; predict(new_data = southround3games, type=\"prob\") |&gt;\n  bind_cols(southround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround4games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Colorado\"\n) \n\nsouthround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nsouthround4 &lt;- rf_fit |&gt; predict(new_data = southround4games) |&gt;\n  bind_cols(southround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround4 &lt;- rf_fit |&gt; predict(new_data = southround4games, type=\"prob\") |&gt;\n  bind_cols(southround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Grambling\"\n) |&gt; add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_team_short_display_name=\"TCU\"\n) |&gt; add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"Kansas\",\n  opponent_team_short_display_name=\"Samford\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Oregon\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Akron\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas\",\n  opponent_team_short_display_name=\"Colorado St\"\n) |&gt; add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_team_short_display_name=\"Saint Peter's\"\n)\n\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround1games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nmidwestround1 &lt;- rf_fit |&gt; predict(new_data = midwestround1games) |&gt;\n  bind_cols(midwestround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1 &lt;- rf_fit |&gt; predict(new_data = midwestround1games, type=\"prob\") |&gt;\n  bind_cols(midwestround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nmidwestround2games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Utah State\"\n) |&gt; add_row(\n  team_short_display_name=\"McNeese\",\n  opponent_team_short_display_name=\"Samford\"\n) |&gt; add_row(\n  team_short_display_name=\"Oregon\",\n  opponent_team_short_display_name=\"Creighton\"\n) |&gt; add_row(\n  team_short_display_name=\"Colorado St\",\n  opponent_team_short_display_name=\"Tennessee\"\n) \n\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround2games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nmidwestround2 &lt;- rf_fit |&gt; predict(new_data = midwestround2games) |&gt;\n  bind_cols(midwestround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround2 &lt;- rf_fit |&gt; predict(new_data = midwestround2games, type=\"prob\") |&gt;\n  bind_cols(midwestround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nmidwestround3games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Tennessee\"\n)\n\nmidwestround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround3games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nmidwestround3 &lt;- rf_fit |&gt; predict(new_data = midwestround3games) |&gt;\n  bind_cols(midwestround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround3 &lt;- rf_fit |&gt; predict(new_data = midwestround3games, type=\"prob\") |&gt;\n  bind_cols(midwestround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nmidwestround4games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Creighton\"\n) \n\nmidwestround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nmidwestround4 &lt;- rf_fit |&gt; predict(new_data = midwestround4games) |&gt;\n  bind_cols(midwestround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround4 &lt;- rf_fit |&gt; predict(new_data = midwestround4games, type=\"prob\") |&gt;\n  bind_cols(midwestround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nfinal4games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"North Carolina\"\n) |&gt; add_row(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Purdue\"\n)\n\nfinal4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(final4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nfinal4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(final4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nfinal4 &lt;- rf_fit |&gt; predict(new_data = final4games) |&gt;\n  bind_cols(final4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nfinal4 &lt;- rf_fit |&gt; predict(new_data = final4games, type=\"prob\") |&gt;\n  bind_cols(final4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nnattygames &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Houston\"\n)\n\nnattygames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(nattygames)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nnattygames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(nattygames) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nnatty &lt;- rf_fit |&gt; predict(new_data = nattygames) |&gt;\n  bind_cols(nattygames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nnatty &lt;- rf_fit |&gt; predict(new_data = nattygames, type=\"prob\") |&gt;\n  bind_cols(natty) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nTo make my predictions, I primarily used a rolling mean value of a team’s offensive and defensive efficiency. That value was determined using a formula to find points per possession and then multiplying that value by 100. Another factor which I thought would heavily impact the outcome of a game would be a team’s rebound margin. I feel like whenever I’m watching a close game, i’ve often seen one team run away with it because they can get an offensive rebound giving their team another chance at a shot. This did come back to bite me, however because some teams are great at rebounding, but aren’t as good at the rest of basketball.\n\n\nCode\nsummary(game_recipe) |&gt;\n  select(variable, role) |&gt; \n  filter(role != \"ID\") |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"The predictors\",\n    subtitle = \"A mix of efficiencies, ratings and recency bias.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Henry Goodwin\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      The predictors\n    \n    \n      A mix of efficiencies, ratings and recency bias.\n    \n    \n      variable\n      role\n    \n  \n  \n    team_season_offensive_efficiency\npredictor\n    team_season_defensive_efficiency\npredictor\n    team_opponent_season_offensive_efficiency\npredictor\n    team_opponent_season_defensive_efficiency\npredictor\n    team_rolling_mean_opponent_offensive_efficiency\npredictor\n    team_rolling_mean_offensive_efficiency\npredictor\n    team_rolling_mean_opponent_defensive_efficiency\npredictor\n    team_rolling_mean_defensive_efficiency\npredictor\n    team_rolling_rebound_margin\npredictor\n    team_result\noutcome\n  \n  \n    \n      By: Henry Goodwin\n    \n  \n  \n\n\n\n\nOriginally I was trying out logistic regression and random forests, and was getting similar numbers, so I just decided to go with random forests, since the idea of decision trees branching out into different choices reminds me of a bracket.\nWhen I was making my bracket, I was not confident in about half of the picks my model was making, and would wince a little bit for every time my model had McNeese winning a game.\nUltimately in the first round my model performed the best in the South, where it got 7/8 games correct, and of course the one game it missed was due to 2 seed Marquette destroying 15 seed Western Kentucky 87-69. Who could’ve guessed? Not my model apparently.\nHere’s what my model predicted:\n\n\nCode\nsouthround1 |&gt; \n  select(team_short_display_name, .pred_class, .pred_W, opponent_team_short_display_name) |&gt;\n  gt() |&gt; \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) |&gt;\n  tab_header(\n    title = \"South Regional: Round 1\",\n    subtitle = \"Picking Texas A&M was hard, but points are points.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Henry Goodwin\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(.pred_W),\n    decimals = 1\n  )\n\n\n\n\n\n\n  \n    \n      South Regional: Round 1\n    \n    \n      Picking Texas A&M was hard, but points are points.\n    \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    Houston\nW\n52.1%\nLongwood\n    Wisconsin\nL\n37.4%\nJames Madison\n    Kentucky\nL\n46.3%\nOakland\n    Florida\nL\n12.9%\nColorado\n    Texas Tech\nL\n19.1%\nNC State\n    Marquette\nL\n22.8%\nWestern KY\n    Nebraska\nL\n29.8%\nTexas A&M\n    Duke\nW\n70.8%\nVermont\n  \n  \n    \n      By: Henry Goodwin\n    \n  \n  \n\n\n\n\nWhile one region was kind to my model, one was very rude to my model, and was almost the complete opposite of the south. In the East region, my model only got two of the games correct in the first round. Funny enough, however, both the East and South were 1/4 in the second round.\nHonestly, the absurdity of the picks didn’t change all too much between the South and the East, I honestly think I just got unlucky. All my predicted upsets didn’t happen, which is normal, it’d be an upset for a reason, but most of the games where I picked the team that should’ve probably won, they got upset.\n\n\nCode\neastround1 |&gt; \n  select(team_short_display_name, .pred_class, .pred_W, opponent_team_short_display_name) |&gt;\n  gt() |&gt; \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) |&gt;\n  tab_header(\n    title = \"East Regional: Round 1\",\n    subtitle = \"Once Duquesne beat BYU, I knew it was the beginning of the end for my bracket.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Henry Goodwin\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(.pred_W),\n    decimals = 1\n  )\n\n\n\n\n\n\n  \n    \n      East Regional: Round 1\n    \n    \n      Once Duquesne beat BYU, I knew it was the beginning of the end for my bracket.\n    \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    Illinois\nW\n54.0%\nMorehead St\n    Washington St\nL\n43.9%\nDrake\n    UConn\nW\n75.1%\nStetson\n    Iowa State\nL\n40.2%\nS Dakota St\n    FAU\nW\n65.8%\nNorthwestern\n    San Diego St\nL\n34.5%\nUAB\n    BYU\nW\n58.7%\nDuquesne\n    Auburn\nW\n85.4%\nYale\n  \n  \n    \n      By: Henry Goodwin\n    \n  \n  \n\n\n\n\n2/4 in the final 4 while correctly guessing UConn repeating isn’t too shabby, but all 1 seeds in the final 4 isn’t exactly a bold take. I also think part of the reason why all the 1 seeds made it for me was because my model had so many upsets that it left a decently easy road for all of them.\nWhether I should’ve included more predictors or not, I was in the 76th percentile of bracket makers, leaving 6.2 million brackets better than mine. In our class group I was tied for fifth. Guessing the champion didn’t earn me many points in the competition, since all but two had UConn winning it all. I guess that just speaks to how dominant that team is. Nine different models using different predictors all came to the conclusion that another UConn championship was inevitable.\nIf I were to make my model again, I would definitely want to include some sort of Elo system to make some conferences better than others. That way I wouldn’t have so many predicted upsets, like McNeese winning a couple of games because they dogwalked the Montana School for the Visually Impaired. Even some sort of system that gave teams with a higher seed more of a leg up would be helpful. I think I would also choose to include more than just rebound margin and offensive and defensive efficiency.\nThe code I used to make my model was greatly helped by hoopR and Tidymodels."
  }
]